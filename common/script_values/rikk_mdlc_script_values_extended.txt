## deviant trait
## mesh network trait
rikk_mdlc_counter_deviants = {
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robotic_deviants
			}
		}
		mode = add	
	}
	max = 100
}

## mesh network trait
rikk_mdlc_counter_mesh_network = {
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robotic_mesh_network
			}
		}
		mode = add	
	}
	max = 10000
}

## nanomachines trait
rikk_mdlc_counter_nano_pops = {
	base = -10000
	max = 20000
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robotic_constant_growth
			}
		}
		mode = add
	}
}

## overclocked origin
rikk_mdlc_counter_glitch_chance_pops = {
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_assembly_mentorship
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_elevated_junctions
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_excessive_endurance
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_expressed_tradition
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_farm_appendages
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_hardened_adaptibility
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_logic_engines
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_power_drills
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_pre_planned_assembly
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_squeezed_power
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_superconductive
			}
		}
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = rikk_mdlc_trait_robot_overclocked_welded_smiles
			}
		}
		mode = add
	}
	max = 500
}

rikk_mdlc_counter_glitch_chance_pops_times_five = { #used for calculating cost of avoiding negative consequence in events
	base = 1
	mult = value:rikk_mdlc_counter_glitch_chance_pops
	mult = 5
}

rikk_mdlc_counter_leaders_glitched = {
	complex_trigger_modifier = {
		trigger = count_owned_leader
		mode = add
	}
	divide = 3
	round_to = 1
	min = 1
}

rikk_mdlc_counter_pops_glitched = {
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		mode = add
	}
	divide = 3
	round_to = 1
	min = 1
}

rikk_mdlc_counter_ruler_glitch_bonus_traits = {
	modifier = {
		add = 2
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_elevated_junctions
		}
	}
	modifier = {
		add = 2
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_pre_planned_assembly
		}
	}
	modifier = {
		add = 2
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_excessive_endurance
		}
	}
	modifier = {
		add = 1
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_assembly_mentorship
		}
	}
	modifier = {
		add = 1
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_welded_smiles
		}
	}
	modifier = {
		add = 1
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_superconductive
		}
	}
	modifier = {
		add = 1
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_squeezed_power
		}
	}
	modifier = {
		add = 1
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_power_drills
		}
	}
	modifier = {
		add = 1
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_logic_engines
		}
	}
	modifier = {
		add = 1
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_hardened_adaptibility
		}
	}
	modifier = {
		add = 1
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_expressed_tradition
		}
	}
	modifier = {
		add = 1
		owner = {
			has_trait = rikk_mdlc_trait_robot_overclocked_farm_appendages
		}
	}
	modifier = {
		owner = {
			has_edict = rikk_mdlc_damn_the_consequences_machine
		}
		multiply = 2
	}
	min = 1
}

## encrypted protocol origin

rikk_mdlc_counter_encrypted_protocol_decrypt = {
	base = 0
	modifier = {
		add = owner.modifier:intel_decryption_add
	}
	min = 0
}

rikk_mdlc_counter_protocol_activated = {
	complex_trigger_modifier = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				has_trait = trait_machine_unit
			}
		}
		mode = add
	}
}

