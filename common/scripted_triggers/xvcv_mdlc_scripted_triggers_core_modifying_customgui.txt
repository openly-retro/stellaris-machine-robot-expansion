# Default amount of trait points
@xvcv_mdlc_core_modifying_base_num_trait_points = 4
# Values with T1 and T2 core modifying techs, respectively
@xvcv_mdlc_core_modifying_base_num_trait_points_t1 = 5
@xvcv_mdlc_core_modifying_base_num_trait_points_t2 = 6

# Default number of trait picks
@xvcv_mdlc_core_modifying_base_num_trait_picks = 3
# Values with T1 and T2 core modifying techs, respectively
@xvcv_mdlc_core_modifying_base_num_trait_picks_t1 = 4
@xvcv_mdlc_core_modifying_base_num_trait_picks_t2 = 5

# How many trait points does each tier of trait cost to apply to the ruler
@xvcv_mdlc_core_modifying_common_trait_points_cost = 1
@xvcv_mdlc_core_modifying_veteran_trait_points_cost = 2
@xvcv_mdlc_core_modifying_destiny_trait_points_cost = 3

# These numbers are applied to both energy costs, and alloy costs
@xvcv_mdlc_core_modifying_common_trait_cost = 200
@xvcv_mdlc_core_modifying_common_trait_refund = 100
@xvcv_mdlc_core_modifying_veteran_trait_cost = 500
@xvcv_mdlc_core_modifying_veteran_trait_refund = 250
@xvcv_mdlc_core_modifying_destiny_trait_cost = 1000
@xvcv_mdlc_core_modifying_destiny_trait_refund = 500

xvcv_mdlc_core_modifying_requires_ruler_subclass_or_focus_trigger = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_requires_$CLASS$_$ID$_tooltip.fail
        ruler = { has_trait = $ID$ }
    }
}
#remember that this trigger is the opposite version of the above one
xvcv_mdlc_core_modifying_requires_no_ruler_subclass_or_focus_trigger = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_requires_no_$CLASS$_$ID$_tooltip.fail
        ruler = { NOT = { has_trait = $ID$ } }
    }
}
#for common traits
xvcv_mdlc_core_modifying_check_trait_resources_cost_common = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_trait_cost.fail
        has_country_resource = { type = energy amount >= 200 }
        has_country_resource = { type = alloys amount >= 200 }
    }
}
# If points are NOT at least 1
xvcv_mdlc_core_modifying_check_trait_points_cost_common = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_trait_points.fail
        check_variable = { which = xvcv_mdlc_core_modifying_trait_points value >= 1 }
    }
}
#for veteran traits
xvcv_mdlc_core_modifying_check_trait_resources_cost_veteran = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_trait_cost.fail_veteran
        has_country_resource = { type = energy amount >= 500 }
        has_country_resource = { type = alloys amount >= 500 }
    }
}
xvcv_mdlc_core_modifying_check_trait_points_cost_veteran = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_trait_points.fail
        check_variable = { which = xvcv_mdlc_core_modifying_trait_points value >= 2 }
    }
}
xvcv_mdlc_core_modifying_trait_skill_level_veteran_trigger = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_trait_skill_level.fail_veteran
        ruler = { has_base_skill >= 4 }
    }
}
#for destiny traits
xvcv_mdlc_core_modifying_check_trait_resources_cost_paragon = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_trait_cost.fail_paragon
        has_country_resource = { type = energy amount >= 1000 }
        has_country_resource = { type = alloys amount >= 1000 }
    }
}
xvcv_mdlc_core_modifying_check_trait_points_cost_paragon = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_trait_points.fail
        check_variable = { which = xvcv_mdlc_core_modifying_trait_points value >= 3 }
    }
}
xvcv_mdlc_core_modifying_trait_skill_level_paragon_trigger = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_trait_skill_level.fail_paragon
        ruler = { has_base_skill >= 8 }
    }
}
#and that ends here
xvcv_mdlc_core_modifying_check_trait_picks = {
    optimize_memory
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_trait_picks.fail
        check_variable = { which = xvcv_mdlc_core_modifying_trait_picks value > 0 }
    }
}

# The pattern here seems to be take only positive traits,
# and take the highest level of that trait and add it to the list.
# Traits are organized by which vanilla file are they taken from, and there are a LOT.

# xvcv_mdlc_core_modifying_ruler_traits_trigger moved to
# 85_core_modifying_ruler_trait_trigger.txt

xvcv_mdlc_core_modifying_reset_traits_trigger = {
    optimize_memory
    custom_tooltip = xvcv_mdlc_core_modifying_reset_traits_tooltip
    custom_tooltip = xvcv_mdlc_core_modifying_reset_traits_button_effect_tooltip_2
    custom_tooltip_fail = {
        text = xvcv_mdlc_core_modifying_reset_traits.fail
        ruler = { xvcv_mdlc_core_modifying_ruler_traits_trigger = yes }
    }
}

# xvcv_mdlc_core_modifying_still_has_subclass_traits_picked
# moved to its own auto-generated file
