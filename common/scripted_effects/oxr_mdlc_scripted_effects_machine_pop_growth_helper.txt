# Effects to compound fractional pop assembly and create add'l pops


# Called on the event timer and add X pops to each pop group
oxr_mdlc_planet_add_pops_from_fractional_compound_pop_assembly = {

	if = {
		limit = {
			NOT = { has_modifier = oxr_mdlc_country_machine_pop_growth_helper }
		}
		add_modifier = {
			modifier = oxr_mdlc_country_machine_pop_growth_helper
			days = 30
			clear_on_owner_change = no
		}
	}

	# Accurate
	export_trigger_value_to_variable = {
		trigger = count_owned_pop_group
		limit = {
			is_robot_pop_group = yes
		}
		variable = oxr_mdlc_planet_num_artificial_pop_groups
	}

    export_modifier_to_variable = {
        modifier = planet_pop_assembly_add
        variable = oxr_mdlc_planet_machine_pop_growth_total_for_display
    }
    log = "This month's pop assembly is \\[This.oxr_mdlc_planet_machine_pop_growth_total_for_display] "

	if = {
		limit = {
			NOT = {
				is_variable_set = oxr_mdlc_planet_machine_pop_growth_running_compounded_total
			}
		}
		set_variable = {
			which = oxr_mdlc_planet_machine_pop_growth_running_compounded_total
			value = 0
		}
	}
	# Get this month's fractional amount
	set_variable = {
		which = oxr_mdlc_planet_machine_pop_growth_this_months_fraction
		value = modifier:planet_pop_assembly_add
	}
	# change 5.6 to 0.6, for example
	modulo_variable = {
		which = oxr_mdlc_planet_machine_pop_growth_this_months_fraction
		value = 1
	}
	# Add this month's fraction to the stored amount
	change_variable = {
		which = oxr_mdlc_planet_machine_pop_growth_running_compounded_total
		value = oxr_mdlc_planet_machine_pop_growth_this_months_fraction
	}
	# clear_variable = oxr_mdlc_planet_machine_pop_growth_this_months_fraction

	# check if leftover fraction is > 1
	if = {
		limit = {
			check_variable = {
				which = oxr_mdlc_planet_machine_pop_growth_running_compounded_total
				value >= 1
			}
		}
		# Temporarily show that this month's pop growth was bumped up by 1
		change_variable = {
			which = oxr_mdlc_planet_machine_pop_growth_total_for_display
			value = 1
		}
		subtract_variable = {
			which = oxr_mdlc_planet_machine_pop_growth_running_compounded_total
			value = 1
		}
	}
	# Drop fractional amount off of xvcv_mdlc_bio_robot_growth_rate_per_month_var
	# because we are tracking it elsewhere
	floor_variable = oxr_mdlc_planet_machine_pop_growth_total_for_display

	every_owned_pop_group = {
		limit = {
			oxr_mdlc_pop_group_has_robots = yes
		}
		add_pop_amount = 1
		log = "Added 1 pops to \\[This.GetName] from fractional pop assembly rollover"
	}

}

oxr_mdlc_planet_update_population_count_only = {

	# last month's pop count
	if = {
		limit = {
			NOT = {
				is_variable_set = oxr_mdlc_planet_total_robot_pops_last_month
			}
		}
        set_variable = {
            which = oxr_mdlc_planet_total_robot_pops_last_month
            value = value:oxr_mdlc_num_assembled_pops_on_planet
        }
	}
	else = {
		# Take the last known value of oxr_mdlc_planet_total_robot_pops_this_month
		# and move into last month's register
		set_variable = {
			which = oxr_mdlc_planet_total_robot_pops_last_month
			value = oxr_mdlc_planet_total_robot_pops_this_month
		}
	}

	# set this month's
    set_variable = {
        which = oxr_mdlc_planet_total_robot_pops_this_month
        value = value:oxr_mdlc_num_assembled_pops_on_planet
    }

    # calc difference
	set_variable = {
		which = oxr_mdlc_planet_robot_pop_difference
		value = oxr_mdlc_planet_total_robot_pops_this_month
	}
	subtract_variable = {
		which = oxr_mdlc_planet_robot_pop_difference
		value = oxr_mdlc_planet_total_robot_pops_last_month
	}

}