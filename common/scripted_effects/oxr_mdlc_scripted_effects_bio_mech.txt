# Phoenix 4.0 and later Bio Mech growth effects and such

# The new calculations only need to add up growth modifiers 
# and create that many pops per month, in each pop group that's
# a bio-mech species (or has the trait)

# Called each month from whenever the static modifier was added to the planet
oxr_mdlc_planet_calc_monthly_bio_mech_pops_add = {
	# The star of the show ... xvcv_mdlc_bio_robot_growth_rate_per_month_var
	set_variable = {
		which = xvcv_mdlc_bio_robot_growth_rate_per_month_var
		value = 3
	}
	# Retro: Utilize xvcv_mdlc_bio_robot_growth_add
	export_modifier_to_variable = {
		modifier = xvcv_mdlc_bio_robot_growth_add
		variable = xvcv_mdlc_bio_robot_growth_add_var  # shown in UI
	}
	change_variable = {
		which = xvcv_mdlc_bio_robot_growth_rate_per_month_var 
		value = modifier:xvcv_mdlc_bio_robot_growth_add
	}
	# Give a little bonus from mechanical / machine assembly
	if = {
		limit = {
			check_modifier_value = {
				modifier = planet_pop_assembly_add
				value > 0
			}
		}
		set_variable = {
			which = xvcv_mdlc_bio_robot_growth_progress_var_from_assembly
			value = modifier:planet_pop_assembly_add
		}
		if = {
			limit = {
				check_modifier_value = {
					modifier = planet_pop_assembly_mult
					value > 0
				}
			}
			export_modifier_to_variable = {
				modifier = planet_pop_assembly_mult
				variable = planet_pop_assembly_mult_var
			}
			change_variable = {
				which = planet_pop_assembly_mult_var
				value = 1
			}
			multiply_variable = {
				which = xvcv_mdlc_bio_robot_growth_progress_var_from_assembly
				value = planet_pop_assembly_mult_var
			}
		}
		divide_variable = {
			which = xvcv_mdlc_bio_robot_growth_progress_var_from_assembly
			value = 4
		}
		change_variable = {
			which = xvcv_mdlc_bio_robot_growth_progress_var 
			value = xvcv_mdlc_bio_robot_growth_progress_var_from_assembly
		}
		change_variable = {
			which = xvcv_mdlc_bio_robot_growth_rate_per_month_var 
			value = xvcv_mdlc_bio_robot_growth_progress_var_from_assembly
		}
		log = "Added \\[This.xvcv_mdlc_bio_robot_growth_progress_var_from_assembly] pop assembly to hybrid cloning value."
		# clear_variable = xvcv_mdlc_bio_robot_growth_progress_var_from_assembly_tmp
	}
	# Show modifier in planet
	if = {
		limit = { NOT = { has_modifier = xvcv_mdlc_bio_robot_growth_progress_percent } }
		add_modifier = { modifier = xvcv_mdlc_bio_robot_growth_progress_percent days = -1 }
	}
}

# Called on the event timer and add X pops to each pop group
oxr_mdlc_planet_increment_bio_pop_groups_each_month = {

	if = {
		limit = {
			NOT = {
				is_variable_set = xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover
			}
		}
		set_variable = {
			which = xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover
			value = 0
		}
	}
	# Get this month's fraction
	set_variable = {
		which = xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover_tmp
		value = xvcv_mdlc_bio_robot_growth_rate_per_month_var
	}
	log = "xvcv_mdlc_bio_robot_growth_rate_per_month_var before modulo: \\[This.xvcv_mdlc_bio_robot_growth_rate_per_month_var]"
	# change 5.6 to 0.6
	modulo_variable = {
		which = xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover_tmp
		value = 1
	}
	log = "modulo of xvcv_mdlc_bio_robot_growth_rate_per_month_var % 1 is \\[This.xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover_tmp] "
	change_variable = {
		which = xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover
		value = xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover_tmp
	}
	clear_variable = xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover_tmp

	# check if leftover fraction is > 1
	if = {
		limit = {
			check_variable = {
				which = xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover
				value >= 1
			}
		}
		change_variable = {
			which = xvcv_mdlc_bio_robot_growth_rate_per_month_var
			value = 1
		}
		subtract_variable = {
			which = xvcv_mdlc_bio_robot_growth_rate_per_month_var_leftover
			value = 1
		}
	}
	# Drop fractional amount off of xvcv_mdlc_bio_robot_growth_rate_per_month_var
	# because we are tracking it elsewhere
	log = "Bio-Mech growth floored FROM \\[This.xvcv_mdlc_bio_robot_growth_rate_per_month_var] "
	floor_variable = xvcv_mdlc_bio_robot_growth_rate_per_month_var
	log = "Bio-Mech growth floored to \\[This.xvcv_mdlc_bio_robot_growth_rate_per_month_var] "

	every_owned_pop_group = {
		limit = {
			OR = {
				pop_group_has_trait = xvcv_mdlc_trait_bio_robot
				is_species_class = XVCV_MDLC_BIO_ROBOT
			}
		}
		add_pop_amount = planet.xvcv_mdlc_bio_robot_growth_rate_per_month_var
		log = "Added \\[This.planet.xvcv_mdlc_bio_robot_growth_rate_per_month_var]] pops to \\[This.GetName] "
		# Check traits while we are here
		if = {
			limit = {
				pop_group_has_trait = xvcv_mdlc_bio_robot_trait_org_body_copy_design
			}
			add_pop_amount = 2
		}
		if = {
			limit = {
				pop_group_has_trait = trait_robot_mass_produced
			}
			add_pop_amount = 1
		}
		if = {
			limit = {
				pop_group_has_trait = trait_rapid_breeders
			}
			add_pop_amount = 1
		}
	}
}