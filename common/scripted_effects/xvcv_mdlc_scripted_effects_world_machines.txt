xvcv_mdlc_world_machines_output_value_calc_effect = {
	# optimize_memory
	# This effect is only called from on_built/on_destroy of t3 world districts

	clear_variable = xvcv_mdlc_world_machines_districts_output_var
	switch = {
		trigger = has_modifier
		xvcv_mdlc_world_machines_districts_heat_indicator_good = { remove_modifier = xvcv_mdlc_world_machines_districts_heat_indicator_good }
		xvcv_mdlc_world_machines_districts_heat_indicator_neutral = { remove_modifier = xvcv_mdlc_world_machines_districts_heat_indicator_neutral }
		xvcv_mdlc_world_machines_districts_heat_indicator_bad = { remove_modifier = xvcv_mdlc_world_machines_districts_heat_indicator_bad }
	}

	# create/update 'xvcv_mdlc_world_machines_districts_output_var'
	# create/update 'xvcv_mdlc_world_machines_districts_current_output_for_display_var'
	xvcv_mdlc_count_districts_calculate_output_display_var = yes

	#log = "Going into xvcv_mdlc_world_machines_districts_heat_indicators_calc_effect"
	if = {
		limit = { check_variable = { which = xvcv_mdlc_world_machines_districts_output_var value > 0 } }
		add_modifier = { modifier = xvcv_mdlc_world_machines_districts_heat_indicator_good days = -1 }
	}
	else_if = {
		limit = { check_variable = { which = xvcv_mdlc_world_machines_districts_output_var value = 0 } }
		add_modifier = { modifier = xvcv_mdlc_world_machines_districts_heat_indicator_neutral days = -1 }
	}
	else_if = {
		limit = { check_variable = { which = xvcv_mdlc_world_machines_districts_output_var value < 0 } }
		add_modifier = { modifier = xvcv_mdlc_world_machines_districts_heat_indicator_bad days = -1 }
	}
	# Reset the display to be "100%" (1)
	set_variable = {
		which = xvcv_mdlc_world_machines_districts_current_output_for_display_var
		value = 1
	}
	# Add or subtract a decimal value (1 minus 0.1 = 0.9 )
	change_variable = {
		which = xvcv_mdlc_world_machines_districts_current_output_for_display_var
		value = xvcv_mdlc_world_machines_districts_output_var
	}
	# convert 0.1 to 10%
	multiply_variable = {
		which = xvcv_mdlc_world_machines_districts_current_output_for_display_var
		value = 100
	}
	#log = "Finished xvcv_mdlc_world_machines_districts_heat_indicators_calc_effect"
}

oxr_mdlc_world_machines_check_should_balance_cooling_districts = {
	if = {
		limit = {
			check_variable = {
				which = xvcv_mdlc_world_machines_districts_output_var
				value > 0.4
			}
		}
		oxr_mdlc_planet_destroy_excess_cooling_districts = yes
	}
}


# For any non-resource district, when thermal throttling is on, add or remove offset deposits
# If throttling is off (world machine output is 0 or above), remove offset deposits
# Takes two vars: $DISTRICT_TYPE$ and $OFFSET_DEPOSIT_TYPE$
# Deposit type is what district to add as an offset
# ASSUMPTIONS: There is at least one offset deposit, OR one district
xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
	optimize_memory
	#log = "Going to adjust non-resource district offsets for  $DISTRICT_TYPE$ "
	export_trigger_value_to_variable = {
		trigger = count_deposits
		parameters = { type = $OFFSET_DEPOSIT_TYPE$ }
		variable = xvcv_mdlc_num_existing_offsets_of_type
	}
	# Base the amount of offsets to add by number of districts
	# Do not add more offsets than there are districts of this type
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = { type = $DISTRICT_TYPE$ }
		variable = xvcv_mdlc_num_existing_districts_of_type
	}
	#log = "At the start of this scripted effect, there are \\[This.xvcv_mdlc_num_existing_offsets_of_type]"
	#log = "At the start of this scripted effect, there are \\[This.xvcv_mdlc_num_existing_districts_of_type] districts of this type."
	# # Clear existing deposits

	# Bring out the big guns (while loop) bc there is a weird bug iterating custom district types and deleting them
	# And then I find there are still more districts added somehow after deleting them all
	while = {
		limit = {
			check_variable = {
				which = xvcv_mdlc_num_existing_offsets_of_type
				value > 0
			}
		}
		every_deposit = { limit = { is_deposit_type = $OFFSET_DEPOSIT_TYPE$ } remove_deposit = yes }
		export_trigger_value_to_variable = {
			trigger = count_deposits
			parameters = { type = $OFFSET_DEPOSIT_TYPE$ }
			variable = xvcv_mdlc_num_existing_offsets_of_type
		}
	}
	# Evaluate the current xvcv_mdlc_world_machines_districts_output_var
	# which is a decimal like -0.5 or 0.2
	if = {
		limit = {
			check_variable = {
				which = xvcv_mdlc_world_machines_districts_output_var
				value < 0
			}
		}
		# Initialize this variable
		set_variable = {
			which = xvcv_mdlc_wm_num_offsets_to_add
			value = xvcv_mdlc_num_existing_districts_of_type
		}
		# Make a copy of the output var, modify it
		set_variable = {
			which = xvcv_mdlc_wm_output_var_copy
			value = xvcv_mdlc_world_machines_districts_output_var
		}
		# There is a possible bug here, if the output is lower than -1.0, 
		# then dont add more districts to go beyond the base of what the planet produces
		# Ex: Don't add 12 offset districts, because then it will go beyond just offsetting the planet's
		# non-resource production
		# Bugfix: Set this value BEFORE multiplying it ;)
		if = {
			limit = {
				check_variable = {
					which = xvcv_mdlc_wm_output_var_copy
					value <= -1.0
				}
			}
			set_variable = {
				which = xvcv_mdlc_wm_output_var_copy
				value = -1.0
			}
			#log = "The output is below -100% so not going to reduce the num of districts beyond this."
		}
		# Whatever the value is now, mult by -10 so -0.3 becomes 3...
		multiply_variable = {
			which = xvcv_mdlc_wm_output_var_copy
			value = -10
		}
		# Offset is -0.2 (2) times num of districts (1) so we'll add 2 offset deposits
		# xvcv_mdlc_wm_num_offsets_to_add 2, xvcv_mdlc_wm_output_var_copy at 1, so add 2 offsets
		# xvcv_mdlc_wm_num_offsets_to_add 4, xvcv_mdlc_wm_output_var_copy at 1, so add 4 offsets
		multiply_variable = {
			which = xvcv_mdlc_wm_num_offsets_to_add
			value = xvcv_mdlc_wm_output_var_copy
		}
		# If we calculated there are offsets to add, then add them
		if = {
			limit = {
				check_variable = {
					which = xvcv_mdlc_wm_num_offsets_to_add
					value > 0
				}
			}
			#log = "Going to add \\[This.xvcv_mdlc_wm_num_offsets_to_add] offsets. World output is \\[This.xvcv_mdlc_world_machines_districts_output_var] and there are \\[This.xvcv_mdlc_num_existing_districts_of_type] existing districts of this type."
			while = {
				count = xvcv_mdlc_wm_num_offsets_to_add
				add_deposit = $OFFSET_DEPOSIT_TYPE$
			}
			#log = "Added \\[This.xvcv_mdlc_wm_num_offsets_to_add]  $OFFSET_DEPOSIT_TYPE$ to this planet, \\[This.GetName]"
		}
		else = {
			#log = "Didn't add any offset districts as they're not needed."
		}
	}
	else = {
		#log = "Didn't add any offset districts as they're not needed."
	}

	# export_trigger_value_to_variable = {
	# 	trigger = num_districts
	# 	parameters = { type = $DISTRICT_TYPE$ }
	# 	variable = xvcv_mdlc_num_existing_districts_of_type
	# }
	#log = "At the END of this scripted effect, there are \\[This.xvcv_mdlc_num_existing_offsets_of_type]"

	clear_variable = xvcv_mdlc_num_existing_districts_of_type
	clear_variable = xvcv_mdlc_num_existing_offsets_of_type
	clear_variable = xvcv_mdlc_wm_num_offsets_to_add
	clear_variable = xvcv_mdlc_wm_output_var_copy
}

# Called if a t3 district is destroyed, or a t3 deposit-using district is built
# Example; Planet is overheated, lacking cooling districts.
# A Drive district is removed, thus bringing up the output modifier
# In this case, it's not appropriate to keep the same amount of deposit offsets,
# so recalculate how many deposit offsets need to be in place now with the 1 t3 distict gone
# Switch planet type and then recalculate offsets for all non-resource districts >_@
xvcv_mdlc_world_machines_recalc_non_resource_offsets_all = {
	optimize_memory
	switch = {
		trigger = is_planet_class
		xvcv_mdlc_pc_machine_ecu = {
			if = {
				limit = {
					OR = {
						has_deposit = xvcv_mdlc_d_pc_machine_ecu_naval_cap_offset
						has_district = xvcv_mdlc_pc_machine_ecu_district_naval_cap
					}
				}
				#log = "Looking at world forge type, adjusting naval cap if needed ..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ecu_district_naval_cap
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ecu_naval_cap_offset
				}
			}
		}
		xvcv_mdlc_pc_machine_cpu = {
			if = {
				limit = {
					OR = {
						has_deposit = xvcv_mdlc_d_pc_machine_cpu_decryption_offset
						has_district = xvcv_mdlc_pc_machine_cpu_district_decryption
					}
				}
				#log = "Looking at world cpu type, adjusting decryption if needed..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_cpu_district_decryption
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_cpu_decryption_offset
				}
			}
		}
		# Need to do a few if statements since there are multiple non-resource districts on server
		xvcv_mdlc_pc_machine_ser = {
			if = {
				limit = {
					OR = {
						has_deposit = xvcv_mdlc_d_pc_machine_ser_admin_cap_offset
						has_district = xvcv_mdlc_pc_machine_ser_district_admin_cap
					}
				}
				#log = "Looking at world server type, adjusting admin cap district if needed ..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ser_district_admin_cap
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ser_admin_cap_offset
				}
			}
			if = {
				limit = {
					has_district = xvcv_mdlc_pc_machine_ser_district_crime
					owner = { has_authority = auth_machine_intelligence }
				}
				#log = "Looking at world server type, adjusting deviancy district if needed ..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ser_district_crime
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ser_crime_offset
				}
			}
			# Happiness-related
			else_if = {
				limit = {
					has_district = xvcv_mdlc_pc_machine_ser_district_crime
					owner = { NOT = { has_authority = auth_machine_intelligence } }
				}
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ser_district_crime
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ser_crime_alt_offset
				}
			}
			if = {
				limit = {
					OR = {
						has_deposit = xvcv_mdlc_d_pc_machine_ser_encryption_offset
						has_district = xvcv_mdlc_pc_machine_ser_district_encryption
					}
				}
				#log = "Looking at world server type, adjusting encryption district if needed ..."
				xvcv_mdlc_world_machines_adjust_non_resource_district_offset_entry = {
					DISTRICT_TYPE = xvcv_mdlc_pc_machine_ser_district_encryption
					OFFSET_DEPOSIT_TYPE = xvcv_mdlc_d_pc_machine_ser_encryption_offset
				}
			}
		}
	}
}

# There's a bug where clearing all deposits doesn't work on the first try
# Take CUSTOM_DEPOSIT_TYPE arg
oxr_mdlc_clear_all_custom_deposits_of_type = {
	optimize_memory
	export_trigger_value_to_variable = {
		trigger = count_deposits
		parameters = { type = $CUSTOM_DEPOSIT_TYPE$ }
		variable = xvcv_mdlc_num_existing_offsets_of_type_custom
	}
	while = {
		limit = {
			check_variable = {
				which = xvcv_mdlc_num_existing_offsets_of_type_custom
				value > 0
			}
		}
		every_deposit = { limit = { is_deposit_type = $CUSTOM_DEPOSIT_TYPE$ } remove_deposit = yes }
		export_trigger_value_to_variable = {
			trigger = count_deposits
			parameters = { type = $CUSTOM_DEPOSIT_TYPE$ }
			variable = xvcv_mdlc_num_existing_offsets_of_type_custom
		}
	}
}

xvcv_mdlc_count_districts_calculate_output_display_var = {
	# A workaround to properly export the world_machines_district_mult value
	# because export_modifier_to_variable is broken in on_district_complete in 3.12.* +
	# HOW THIS WORKS:
	# 1. Count cooling & production districts
	# 2. Calculate production penalty from districts, and bonus from cooling
	# 2. For each cooling district, add 0.3, plus the value of rikk_mdlc_world_machine_cooling_district_effectiveness
	# 5. For each non-cooling district, subtract 0.1
	# 6. The result is exported to xvcv_mdlc_world_machines_districts_output_var
	#log = "Beginning calculating the output display var."

	## ESTABLISH COUNTS OF DISTRICTS
	# 1
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = { type = any }
		variable = xvcv_mdlc_world_machines_num_production_districts
	}
	#log = "There are \\[This.xvcv_mdlc_world_machines_num_production_districts] not-cooling districts"
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = { type = xvcv_mdlc_common_district_cooling }
		variable = xvcv_mdlc_world_machines_num_cooling_districts
	}
	#log = "There are \\[This.xvcv_mdlc_world_machines_num_cooling_districts] cooling districts"
	# total count minus cooling is num production districts
	subtract_variable = {
		which = xvcv_mdlc_world_machines_num_production_districts
		value = xvcv_mdlc_world_machines_num_cooling_districts
	}
	### CREATE DECIMAL BONUS AND PENALTY
	## PENALTY
	# Ex: There are 6 production districts, and 2 cooling
	#2
	set_variable = {
		which = xvcv_mdlc_world_machines_production_penalty 
		value = xvcv_mdlc_world_machines_num_production_districts
	}
	divide_variable = { #convert 6 districts to -0.6
		which = xvcv_mdlc_world_machines_production_penalty
		value = -10
	}
	#log = "Production penalty: \\[This.xvcv_mdlc_world_machines_production_penalty]"
	## BONUS
	set_variable = {
		which = xvcv_mdlc_world_machines_production_bonus
		value = xvcv_mdlc_world_machines_num_cooling_districts
	}
	# The base value is 0.3 and this never changes
	set_variable = {
		which = xvcv_mdlc_cooling_district_strength
		value = 0.3
	}
	# add rikk's bonuses via modifier, if it exists on the planet
	change_variable = {
		which = xvcv_mdlc_cooling_district_strength
		value = modifier:rikk_mdlc_world_machine_cooling_district_effectiveness
	}
	# 2 cooling districts count for 0.3 + modifier (ex: 0.1) for total of 0.4
	# so 2 cooling districts yield a value of 0.8
	multiply_variable = {
		which = xvcv_mdlc_world_machines_production_bonus
		value = xvcv_mdlc_cooling_district_strength
	}

	#calculate effect of rikk_mdlc_world_machine_cooling_district_effectiveness
	# set_variable = { #base of 0.3, so each cooling supports 3 non-cooling districts
	# 	which = rikk_mdlc_world_machine_cooling_district_effect
	# 	value = 0.3
	# }
	#if the bonus is +15% (0.15) then result is every district does 45% cooling (0.45) and supports 4.5 districts
	# change_variable = { 
	# 	which = rikk_mdlc_world_machine_cooling_district_effect
	# 	value = modifier:rikk_mdlc_world_machine_cooling_district_effectiveness
	# }
	#Multiply the effect of each cooling district by number of cooling districts 
	# multiply_variable = {
	# 	which = xvcv_mdlc_world_machines_production_bonus
	# 	value = rikk_mdlc_world_machine_cooling_district_effect
	# }
	#log = "Cooling bonus: \\[This.xvcv_mdlc_world_machines_production_bonus]"

	## MATH UP
	#4 - Add total cooling effectiveness to output penalty
	set_variable = {
		which = xvcv_mdlc_world_machines_districts_output_var
		value = xvcv_mdlc_world_machines_production_penalty
	}
	change_variable = {
		which = xvcv_mdlc_world_machines_districts_output_var
		value = xvcv_mdlc_world_machines_production_bonus
	}

	#log = "Districts output display var calculated to be: \\[This.xvcv_mdlc_world_machines_districts_output_var]"

	#If there are more cooling districts than needed, delete one, then keep on checking
	# while = {
	# 	count = xvcv_mdlc_world_machines_num_cooling_districts
	# 	if = {
	# 		limit = {
	# 			check_variable = {
	# 				which = xvcv_mdlc_world_machines_districts_output_var
	# 				value >= rikk_mdlc_world_machine_cooling_district_effect
	# 			}
	# 		}
	# 		remove_district = xvcv_mdlc_common_district_cooling
	# 		subtract_variable = {
	# 			which = xvcv_mdlc_world_machines_districts_output_var
	# 			value = rikk_mdlc_world_machine_cooling_district_effect
	# 		}
	# 	}
	# }
	clear_variable = xvcv_mdlc_world_machines_production_penalty
	clear_variable = xvcv_mdlc_world_machines_production_bonus
	clear_variable = xvcv_mdlc_world_machines_num_cooling_districts
	# clear_variable = rikk_mdlc_world_machine_cooling_district_effect
}

xvcv_mdlc_decision_machine_world_automation_effect = {
	if = {
		limit = { owner = { has_authority = auth_machine_intelligence } }
		custom_tooltip = xvcv_mdlc_decision_machine_world_automation_tooltip
		else = { custom_tooltip = xvcv_mdlc_decision_machine_world_automation_tooltip_alt }
	}
	custom_tooltip = xvcv_mdlc_decision_machine_world_automation_tooltip_2

	hidden_effect = {
		set_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value = 0 }
		set_variable = { which = xvcv_mdlc_pc_machine_auto_district_industrial_var value = 0 }
		set_variable = { which = xvcv_mdlc_pc_machine_auto_district_generator_var value = 0 }
		set_variable = { which = xvcv_mdlc_pc_machine_auto_district_mining_var value = 0 }
		while = {
			limit = { has_district = district_city }
			remove_district = district_city
			change_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value = 1 }
		}
		while = {
			limit = { has_district = district_nexus }
			remove_district = district_nexus
			change_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value = 1 }
		}
		while = {
			limit = { has_district = district_industrial }
			remove_district = district_industrial
			change_variable = { which = xvcv_mdlc_pc_machine_auto_district_industrial_var value = 1 }
		}
		while = {
			limit = { has_district = district_generator_uncapped }
			remove_district = district_generator_uncapped
			change_variable = { which = xvcv_mdlc_pc_machine_auto_district_generator_var value = 1 }
		}
		while = {
			limit = { has_district = district_mining_uncapped }
			remove_district = district_mining_uncapped
			change_variable = { which = xvcv_mdlc_pc_machine_auto_district_mining_var value = 1 }
		}
		change_pc = xvcv_mdlc_pc_machine_auto
		if = {
			limit = { NOT = { has_modifier = planet_population_control_gestalt } }
			add_modifier = { modifier = planet_population_control_gestalt days = -1 }
		}
		if = {
			limit = { owner = { has_authority = auth_machine_intelligence } }
			while = {
				limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value > 0 } }
				subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value = 1 }
				add_district = xvcv_mdlc_pc_machine_auto_district_nexus
			}
			else = {
				while = {
					limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value > 0 } }
					subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_city_var value = 1 }
					add_district = xvcv_mdlc_pc_machine_auto_district_city
				}
			}
		}
		while = {
			limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_industrial_var value > 0 } }
			subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_industrial_var value = 1 }
			add_district = xvcv_mdlc_pc_machine_auto_district_industrial
		}
		while = {
			limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_generator_var value > 0 } }
			subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_generator_var value = 1 }
			add_district = xvcv_mdlc_pc_machine_auto_district_generator
		}
		while = {
			limit = { check_variable = { which = xvcv_mdlc_pc_machine_auto_district_mining_var value > 0 } }
			subtract_variable = { which = xvcv_mdlc_pc_machine_auto_district_mining_var value = 1 }
			add_district = xvcv_mdlc_pc_machine_auto_district_mining
		}
		clear_variable = xvcv_mdlc_pc_machine_auto_district_city_var
		clear_variable = xvcv_mdlc_pc_machine_auto_district_industrial_var
		clear_variable = xvcv_mdlc_pc_machine_auto_district_generator_var
		clear_variable = xvcv_mdlc_pc_machine_auto_district_mining_var
	}
	xvcv_mdlc_planet_terraforming_resolution_breached_effect = yes
	oxr_mdlc_planet_add_wmc_core_deposit_if_missing = yes
}

oxr_mdlc_planet_destroy_excess_cooling_districts = {
	# the original formula was not to exceed 130%, and destroy districts above that
	# max now is 0.45 per district, so let 0.45 be the new maximum
	# Add 0.1 to try and keep the heat indicator green
	if = {
		limit = {
			has_planet_flag = oxr_lock_oxr_mdlc_planet_destroy_excess_cooling_districts
		}
		log = "Not going to rebalance cooling bc it is in progress ..."
	}
	else = {
		set_planet_flag = oxr_lock_oxr_mdlc_planet_destroy_excess_cooling_districts
		set_variable = {
			which = cooling_district_limit_tmp
			value = 0.3
		}
		change_variable = {
			which = cooling_district_limit_tmp
			value = modifier:rikk_mdlc_world_machine_cooling_district_effectiveness
		}
		set_variable = {
			which = districts_produces_mult_copy_tmp
			value = modifier:xvcv_mdlc_world_machines_districts_produces_mult
		}
	
		while = {
			limit = {
				check_variable = {
					which = districts_produces_mult_copy_tmp
					value >= cooling_district_limit_tmp
				}
			}
			remove_district = xvcv_mdlc_common_district_cooling
			space_owner = {
				add_resource = {
					exotic_gases = 100
					minerals = @xvcv_mdlc_district_cost_5
				}
			}
			set_variable = {
				which = districts_produces_mult_copy_tmp
				value = modifier:xvcv_mdlc_world_machines_districts_produces_mult
			}
			create_message = {
				type = OXR_MDLC_WM_COOLING_DISTRICT_REFUND
				localization = OXR_MDLC_ORIGIN_WM_COOLING_DISTRICT_REFUND_MESSAGE
				days = 20
				target = this
			}
			log = "(2) districts_produces_mult_copy_tmp is at \\[This.districts_produces_mult_copy_tmp]"
		}
		clear_variable = cooling_district_limit_tmp
		clear_variable = districts_produces_mult_copy_tmp
		remove_planet_flag = oxr_lock_oxr_mdlc_planet_destroy_excess_cooling_districts
	}
}