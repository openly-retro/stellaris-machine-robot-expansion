#calculates the bonus from overclocked pops
rikk_mdlc_overclocked_leader_trait_calc_effect = {
	if = {
		limit = { NOT = { is_variable_set = rikk_mdlc_overclocked_leader_instability_counter } }
		set_variable = {
			which = rikk_mdlc_overclocked_leader_instability_counter
			value = 20
		}
	}
	
	#log = "rikk_mdlc_overclocked_leader_instability_counter = \\[this.rikk_mdlc_overclocked_leader_instability_counter]"
	set_variable = {
		which = rikk_mdlc_overclocked_glitch_bonus
		value = value:rikk_mdlc_counter_ruler_glitch_bonus_traits
	}
	#log = "rikk_mdlc_overclocked_glitch_bonus = \\[this.rikk_mdlc_overclocked_glitch_bonus]"
	multiply_variable = {
		which = rikk_mdlc_overclocked_glitch_bonus
		value = rikk_mdlc_overclocked_leader_instability_counter
	}
	divide_variable = {
		which = rikk_mdlc_overclocked_glitch_bonus
		value = 5
	}
	#log = "rikk_mdlc_overclocked_glitch_bonus AFTER = \\[this.rikk_mdlc_overclocked_glitch_bonus]"
	
	add_modifier = { 
		modifier = rikk_mdlc_overclocked_empire_instability_mod
		mult = rikk_mdlc_overclocked_glitch_bonus
		days = 30
	}
	
	set_variable = { #This tells the ruler trait what number to show
		which = rikk_mdlc_overclocked_bonus_mod 
		value = this.rikk_mdlc_overclocked_glitch_bonus
	}
	if = {
		limit = {
			check_variable = { 
				which = rikk_mdlc_overclocked_bonus_mod
				value < 0
			}
		}
		multiply_variable = {
			which = rikk_mdlc_overclocked_bonus_mod
			value = -1
		}
	}
	#log = "rikk_mdlc_overclocked_bonus_mod AFTER = \\[this.rikk_mdlc_overclocked_bonus_mod]"
}

#whenever the country glitches this makes the leader more unstable, lowering its "trait" bonus (actually a modifier)
rikk_mdlc_overclocked_leader_instability_change = {
	if = {
		limit = { NOT = { is_variable_set = rikk_mdlc_overclocked_leader_instability_min } }
		set_variable = {
			which = rikk_mdlc_overclocked_leader_instability_min
			value = -10
		}
	}
	if = {
		limit = { NOT = { is_variable_set = rikk_mdlc_overclocked_leader_instability_sub } }
		set_variable = {
			which = rikk_mdlc_overclocked_leader_instability_sub
			value = 1
		}
	}
	if = {
		limit = {
			AND = {
				check_variable = {
					which = rikk_mdlc_overclocked_leader_instability_counter
					value > rikk_mdlc_overclocked_leader_instability_min
				}
				check_variable = {
					which = rikk_mdlc_overclocked_leader_instability_counter
					value <= 20
				}
			}
		}
		subtract_variable = {
			which = rikk_mdlc_overclocked_leader_instability_counter
			value = rikk_mdlc_overclocked_leader_instability_sub
		}
	}
}

rikk_mdlc_overclocked_leader_instability_framework_repair = {
	set_variable = {
		which = rikk_mdlc_overclocked_leader_instability_min
		value = 0
	}
	if = {
		limit = {
			check_variable = {
				which = rikk_mdlc_overclocked_leader_instability_counter
				value < 0
			}
		}
		set_variable = {
			which = rikk_mdlc_overclocked_leader_instability_counter
			value = 0
		}
	}
}
	
rikk_mdlc_overclocked_leader_instability_repair_response = {
	set_variable = {
		which = rikk_mdlc_overclocked_leader_instability_sub
		value = -1
	}
}

oxr_mdlc_planet_glitch_30_percent_of_pops = {

	export_trigger_value_to_variable = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				rikk_mdlc_pop_has_any_overclocked_trait = yes
			}
		}
		variable = rikk_mdlc_planet_num_overclocked_pops_var
	}
	# Get 33% of planet pops
	divide_variable = {
		which = rikk_mdlc_planet_num_overclocked_pops_var
		value = 3.33
	}
	round_variable = rikk_mdlc_planet_num_overclocked_pops_var
	log = "There are \\[This.rikk_mdlc_planet_num_overclocked_pops_var]] pops glitching on \\[This.GetName] "
	# Transfer pops in batches of 100
	create_pop_group = {
		species = owner.species
		category = complex_drone
		size = 0
		effect = {
			set_pop_group_flag = rikk_mdlc_planet_glitched_pops
			save_event_target_as = rikk_mdlc_planet_glitched_pops
            add_modifier = {
                modifier = rikk_mdlc_overclocked_pop_overheating_mod
                days = 180
            }
			# Go thru all qualifing pop groups, take out 100, until we are done transferring
			prev = {
				# planet scope again
				log = "hi we are in planet scope again"
				while = {
					limit = {
						check_variable = {
							which = rikk_mdlc_planet_num_overclocked_pops_var
							value > 0
						}
					}
					# Default batch size of 100.. too slow to transfer 1 at a time
					# set_variable = {
					# 	which = rikk_mdlc_planet_glitched_pops_transfer_amount
					# 	value = 100
					# }
					every_owned_pop_group = {
						limit = {
							rikk_mdlc_pop_has_any_overclocked_trait = yes
                            NOT = { has_flag = rikk_mdlc_planet_glitched_pops }
						}
						transfer_pop_amount = {
							source = this
							target = event_target:rikk_mdlc_planet_glitched_pops
							amount = 50
						}
						log = "Transferred 50 pops to glitched group "
						# Decrement the total number of pops that need to be glitched
						# with the actual amount of pops transferred in this batch
					}
					subtract_variable = {
						which = rikk_mdlc_planet_num_overclocked_pops_var
						value = 50
					}
				} # endwhile

			} # close planet scope effect inside pop group creation effect
			log = "Applying rikk_mdlc_overclocked_pop_overheating_mod modifier to glitched pop group. "
			remove_pop_group_flag = rikk_mdlc_planet_glitched_pops
		} # close pop group creation effect
	}

}

oxr_mdlc_planet_group_modifier_test = {
	every_owned_pop_group = {
		add_modifier = {
			modifier = rikk_mdlc_overclocked_pop_overheating_mod
			days = 180
		}
	}
}