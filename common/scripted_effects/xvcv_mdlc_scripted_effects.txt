xvcv_mdlc_dominant_species_changing_effect = {
	optimize_memory #see the '99_advanced_documentation.txt', 'Memory Management' section
	every_owned_pop_group = {
		limit = { is_same_species = prev.species }
		change_species = last_created_species
	}
	every_owned_leader = {
		limit = { is_same_species = prev.species }
		change_species = last_created_species
	}
	every_owned_leader = {
		limit = {
			is_councilor = yes
			is_ruler = no
		}
		set_gestalt_node_portrait_effect = yes
	}
	every_envoy = {
		limit = { is_same_species = prev.species }
		change_species = last_created_species
	}
	every_pool_leader = {
		limit = { is_same_species = prev.species }
		change_species = last_created_species
	}
	every_controlled_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			is_same_species = prev.species
		}
		change_species = last_created_species
	}
	every_owned_army = {
		limit = {
			exists = species
			is_same_species = prev.species
		}
		change_species = last_created_species
	}
	change_dominant_species = { species = last_created_species }
	set_built_species = last_created_species
}
xvcv_mdlc_machine_species_rights_adjustments_effect = {
	optimize_memory
	set_citizenship_type = { country = prev type = citizenship_full_machine cooldown = no }
	set_living_standard = { country = prev type = living_standard_hive_mind cooldown = no }
	set_population_controls = { country = prev type = population_control_no cooldown = no }
	set_colonization_controls = { country = prev type = colonization_control_no cooldown = no }
	set_migration_controls = { country = prev type = migration_control_yes cooldown = no }
	set_military_service_type = { country = prev type = military_service_full cooldown = no }
}
xvcv_mdlc_robot_species_rights_adjustments_effect = {
	optimize_memory
	set_citizenship_type = { country = prev type = citizenship_full cooldown = no }
	set_living_standard = { country = prev type = living_standard_good cooldown = no }
	set_population_controls = { country = prev type = population_control_no cooldown = no }
	set_colonization_controls = { country = prev type = colonization_control_no cooldown = no }
	set_migration_controls = { country = prev type = migration_control_no cooldown = no }
	set_military_service_type = { country = prev type = military_service_full cooldown = no }
}
xvcv_mdlc_organic_trophy_species_rights_adjustments_effect = {
	optimize_memory
	set_citizenship_type = { country = prev type = citizenship_organic_trophy cooldown = no }
	set_living_standard = { country = prev type = living_standard_organic_trophy cooldown = no }
	set_population_controls = { country = prev type = population_control_no cooldown = no }
	set_colonization_controls = { country = prev type = colonization_control_no cooldown = no }
	set_migration_controls = { country = prev type = migration_control_no cooldown = no }
	set_military_service_type = { country = prev type = military_service_none cooldown = no }
}
xvcv_mdlc_modify_species_clear_pc_preference_traits_effect = {
	optimize_memory
	switch = {
		trigger = has_trait
		trait_pc_desert_preference = { modify_species = { base = none remove_trait = trait_pc_desert_preference } }
		trait_pc_arid_preference = { modify_species = { base = none remove_trait = trait_pc_arid_preference } }
		trait_pc_savannah_preference = { modify_species = { base = none remove_trait = trait_pc_savannah_preference } }

		trait_pc_tropical_preference = { modify_species = { base = none remove_trait = trait_pc_tropical_preference } }
		trait_pc_continental_preference = { modify_species = { base = none remove_trait = trait_pc_continental_preference } }
		trait_pc_ocean_preference = { modify_species = { base = none remove_trait = trait_pc_ocean_preference } }

		trait_pc_arctic_preference = { modify_species = { base = none remove_trait = trait_pc_arctic_preference } }
		trait_pc_tundra_preference = { modify_species = { base = none remove_trait = trait_pc_tundra_preference } }
		trait_pc_alpine_preference = { modify_species = { base = none remove_trait = trait_pc_alpine_preference } }

		trait_pc_machine_preference = { modify_species = { base = none remove_trait = trait_pc_machine_preference } }
		trait_pc_ai_preference = { modify_species = { base = none remove_trait = trait_pc_ai_preference } }
		trait_pc_hive_preference = { modify_species = { base = none remove_trait = trait_pc_hive_preference } }

		trait_pc_ringworld_habitable_preference = { modify_species = { base = none remove_trait = trait_pc_ringworld_habitable_preference } }
		trait_pc_shattered_ring_habitable_preference = { modify_species = { base = none remove_trait = trait_pc_shattered_ring_habitable_preference } }
		trait_pc_habitat_preference = { modify_species = { base = none remove_trait = trait_pc_habitat_preference } }

		trait_pc_gaia_preference = { modify_species = { base = none remove_trait = trait_pc_gaia_preference } }
		trait_pc_gaia_preference_terraforming = { modify_species = { base = none remove_trait = trait_pc_gaia_preference_terraforming } }
		trait_pc_relic_preference = { modify_species = { base = none remove_trait = trait_pc_relic_preference } }

		trait_pc_city_preference = { modify_species = { base = none remove_trait = trait_pc_city_preference } }
		trait_pc_nuked_preference = { modify_species = { base = none remove_trait = trait_pc_nuked_preference } }
		#add more planet classes here when vanilla updates
	}
}
xvcv_mdlc_modify_species_change_traits_for_lithoid_effect = {
	optimize_memory
	if = { limit = { has_trait = trait_lithoid } modify_species = { base = none remove_trait = trait_lithoid add_trait = xvcv_mdlc_trait_rock_body } }

	if = { limit = { has_trait = trait_lithoid_scintillating } modify_species = { base = none remove_trait = trait_lithoid_scintillating add_trait = xvcv_mdlc_trait_lithoid_scintillating } }
	if = { limit = { has_trait = trait_lithoid_gaseous_byproducts } modify_species = { base = none remove_trait = trait_lithoid_gaseous_byproducts add_trait = xvcv_mdlc_trait_lithoid_gaseous_byproducts } }
	if = { limit = { has_trait = trait_lithoid_volatile_excretions } modify_species = { base = none remove_trait = trait_lithoid_volatile_excretions add_trait = xvcv_mdlc_trait_lithoid_volatile_excretions } }
}

xvcv_mdlc_leader_tied_traits_add_effect = {
	optimize_memory
	every_owned_leader = {
		limit = {
			is_councilor = no
			xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_shared_memory LEADER_TRAIT = xvcv_mdlc_leader_trait_shared_memory }
		}
		oxr_add_trait_no_notify = { t = xvcv_mdlc_leader_trait_shared_memory }
	}
	every_pool_leader = {
		limit = {
			is_councilor = no
			xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_shared_memory LEADER_TRAIT = xvcv_mdlc_leader_trait_shared_memory }
		}
		oxr_add_trait_no_notify = { t = xvcv_mdlc_leader_trait_shared_memory }
	}
	every_owned_leader = {
		limit = {
			is_councilor = no
			xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_memory_backup LEADER_TRAIT = xvcv_mdlc_leader_trait_memory_backup }
		}
		oxr_add_trait_no_notify = { t = xvcv_mdlc_leader_trait_memory_backup }
	}
	every_pool_leader = {
		limit = {
			is_councilor = no
			xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_memory_backup LEADER_TRAIT = xvcv_mdlc_leader_trait_memory_backup }
		}
		oxr_add_trait_no_notify = { t = xvcv_mdlc_leader_trait_memory_backup }
	}
	every_owned_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_bio_robot LEADER_TRAIT = xvcv_mdlc_leader_trait_bio_robot } }
		oxr_add_trait_no_notify = { t = xvcv_mdlc_leader_trait_bio_robot }
	}
	every_pool_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_add_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_bio_robot LEADER_TRAIT = xvcv_mdlc_leader_trait_bio_robot } }
		oxr_add_trait_no_notify = { t = xvcv_mdlc_leader_trait_bio_robot }
	}
}
xvcv_mdlc_leader_tied_traits_remove_effect = {
	optimize_memory
	every_owned_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_shared_memory LEADER_TRAIT = xvcv_mdlc_leader_trait_shared_memory } }
		remove_trait = xvcv_mdlc_leader_trait_shared_memory
	}
	every_pool_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_shared_memory LEADER_TRAIT = xvcv_mdlc_leader_trait_shared_memory } }
		remove_trait = xvcv_mdlc_leader_trait_shared_memory
	}
	every_owned_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_memory_backup LEADER_TRAIT = xvcv_mdlc_leader_trait_memory_backup } }
		remove_trait = xvcv_mdlc_leader_trait_memory_backup
	}
	every_pool_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_memory_backup LEADER_TRAIT = xvcv_mdlc_leader_trait_memory_backup } }
		remove_trait = xvcv_mdlc_leader_trait_memory_backup
	}
	#usually the bio robot trait will remain under most circumstances but just in case...
	every_owned_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_bio_robot LEADER_TRAIT = xvcv_mdlc_leader_trait_bio_robot } }
		remove_trait = xvcv_mdlc_leader_trait_bio_robot
	}
	every_pool_leader = {
		limit = { xvcv_mdlc_leader_tied_traits_remove_trigger = { SPECIES_TRAIT = xvcv_mdlc_trait_bio_robot LEADER_TRAIT = xvcv_mdlc_leader_trait_bio_robot } }
		remove_trait = xvcv_mdlc_leader_trait_bio_robot
	}
}
xvcv_mdlc_servitor_morale_calc_main_effect = {
	optimize_memory
	if = {
		limit = { pop_amount_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage < 0.1 } }
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_abysmal days = -1 }
	}
	else_if = {
		limit = {
			pop_amount_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage < 0.2 }
			pop_amount_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage >= 0.1 }
		}
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_low days = -1 }
	}
	else_if = {
		limit = {
			pop_amount_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage < 0.3 }
			pop_amount_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage >= 0.2 }
		}
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_average days = -1 }
	}
	else_if = {
		limit = {
			pop_amount_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage < 0.4 }
			pop_amount_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage >= 0.3 }
		}
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_high days = -1 }
	}
	else_if = {
		limit = { pop_amount_percentage = { limit = { has_living_standard = { type = living_standard_organic_trophy } } percentage >= 0.4 } }
		add_modifier = { modifier = xvcv_mdlc_servitor_morale_max days = -1 }
	}
}
xvcv_mdlc_servitor_morale_clear_effect = {
	optimize_memory
	switch = {
		trigger = has_modifier
		xvcv_mdlc_servitor_morale_max = { remove_modifier = xvcv_mdlc_servitor_morale_max }
		xvcv_mdlc_servitor_morale_high = { remove_modifier = xvcv_mdlc_servitor_morale_high }
		xvcv_mdlc_servitor_morale_average = { remove_modifier = xvcv_mdlc_servitor_morale_average }
		xvcv_mdlc_servitor_morale_low = { remove_modifier = xvcv_mdlc_servitor_morale_low }
		xvcv_mdlc_servitor_morale_abysmal = { remove_modifier = xvcv_mdlc_servitor_morale_abysmal }
	}
}
xvcv_mdlc_planet_owner_terraforming_resolution_breached_effect = {
	optimize_memory
	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_ecology_environmental_control_board"
				is_active_resolution = "resolution_ecology_paradise_initiative"
			}
		}
		owner = { set_timed_country_flag = { flag = resolution_breached_terraformed days = 3600 } }
	}
}
xvcv_mdlc_civic_goods_distributor_pop_bonus_effect = {
	# This effect converts consumer goods to unity, by dividing it amongst all pops
	# as added unity production
	optimize_memory
	if = {
		limit = { has_modifier = xvcv_mdlc_goods_for_pop_unity_bonus }
		remove_modifier = xvcv_mdlc_goods_for_pop_unity_bonus
	}
	export_resource_income_to_variable = {
		resource = consumer_goods
		variable = xvcv_mdlc_civic_goods_distributor_income_var
	}
	if = {
		limit = { is_ai = no }
		add_resource = {
			consumer_goods = xvcv_mdlc_civic_goods_distributor_income_var
			mult = xvcv_mdlc_civic_goods_distributor_income_var
		}
	}
	export_trigger_value_to_variable = {
		trigger = count_owned_pop_amount
		parameters = {
			limit = {
				OR = {
					is_pop_category = complex_drone
					is_pop_category = simple_drone
				}
			}
		}
		variable = xvcv_mdlc_civic_goods_distributor_pop_var
	}
	# 50 surplus goods
	# 5000 pops
	# would be 0.01 goods per pop distributed, resulting in 50 unity total produced


	#rikk: since there are 100 times more pops in 4.0 the number needs to be divided by 100
	divide_variable = {
		which = xvcv_mdlc_civic_goods_distributor_pop_var
		value = 100
	}

	#calculation e.g.
	#the total income = 19
	#the total pop = 3300/100 = 33
	#19 / 33 = 0.5757575757575758
	#and this means about 0.57 more goods can be distributed per drone pop for additional unity creation
	#so it's 0.57 more unity per pop
	divide_variable = {
		which = xvcv_mdlc_civic_goods_distributor_income_var
		value = xvcv_mdlc_civic_goods_distributor_pop_var
	}
	add_modifier = {
		modifier = xvcv_mdlc_goods_for_pop_unity_bonus
		days = -1
		multiplier = xvcv_mdlc_civic_goods_distributor_income_var
	}
	log = "goods -> unity per pop: \\[This.xvcv_mdlc_civic_goods_distributor_income_var] "
}

xvcv_mdlc_situation_machine_learning_add_progress_effect = {
	optimize_memory
	random_situation = {
		limit = { is_situation_type = xvcv_mdlc_situation_machine_learning }
		add_situation_progress = $VALUE$
	}
	create_message = {
		type = XVCV_MDLC_SITUATION_MACHINE_LEARNING_PROGRESS_TYPE
		localization = xvcv_mdlc_situation_machine_learning_$ON_ACTION_TYPE$
		target = this.capital_scope #it seems that the target should be a planet #or the error occurs #[11:48:15][effect_impl.cpp:21052]: Error in create_message effect, target scope is invalid
		days = 10
	}
	change_variable = { which = xvcv_mdlc_situation_machine_learning_$ON_ACTION_TYPE$_var value = 1 }
}
xvcv_mdlc_situation_machine_learning_add_progress_alt_effect = {
	optimize_memory
	random_situation = {
		limit = { is_situation_type = xvcv_mdlc_situation_machine_learning }
		add_situation_progress = $VALUE$
	}
	create_message = {
		type = XVCV_MDLC_SITUATION_MACHINE_LEARNING_PROGRESS_TYPE
		localization = xvcv_mdlc_situation_machine_learning_$ON_ACTION_TYPE$_alt
		target = this.capital_scope
		days = 10
	}
	change_variable = { which = xvcv_mdlc_situation_machine_learning_$ON_ACTION_TYPE$_alt_var value = 1 }
}
xvcv_mdlc_ap_genetics_mastery_species_new_template_create_effect = {
	#the default scope here should be a species
	create_species = {
		is_mod = yes
		adjective = this
		name = this
		namelist = prev
		plural = this
		class = this
		portrait = this
		traits = { trait = trait_cybernetic }
		homeworld = this.home_planet
	}
	prev = {
		random_owned_pop_group = {
			limit = { is_same_species = prevprev }
			change_species = last_created_species
			xvcv_mdlc_machine_species_rights_adjustments_effect = yes
		}
	}
}
xvcv_mdlc_set_memory_share_level_up_happened_for_commander = {
	owner = {
		set_timed_country_flag = {
			flag = xvcv_mdlc_memory_share_leveled_up_commander
			days = 1
		}
	}
	log = "Set country flag that we leveled up commanders, inside scripted effect"
}
xvcv_mdlc_set_memory_share_level_up_happened_for_scientist = {
	owner = {
		set_timed_country_flag = {
			flag = xvcv_mdlc_memory_share_leveled_up_scientist
			days = 1
		}
	}
	log = "Set country flag that we leveled up scientists, inside scripted effect"
}
xvcv_mdlc_set_memory_share_level_up_happened_for_official = {
	owner = {
		set_timed_country_flag = {
			flag = xvcv_mdlc_memory_share_leveled_up_official
			days = 1
		}
	}
	log = "Set country flag that we leveled up officials, inside scripted effect"
}

xvcv_mdlc_iterate_leaders_level_up_classes_under_skill = {
	# scope here is 'prev'
	# call with CLASS and SKILL_LEVEL
	# set_variable = {
	# 	which = xvcv_total_class_specific_leaders_under_level_2
	# 	# value = value:count_leaders_of_class|CLASS|commander|
	# 	value = value:count_leaders_of_class_under_level|CLASS|$CLASS$|SKILL_LEVEL|$SKILL_LEVEL|
	# }
	# log = "There are \[This.xvcv_total_class_specific_leaders_under_level_2] $CLASS$ leaders to level up that are below level $SKILL_LEVEL$"

	every_owned_leader = {
		limit = {
			is_councilor = no
			has_trait = xvcv_mdlc_leader_trait_shared_memory
			leader_class = $CLASS$
			has_base_skill < $SKILL_LEVEL$
			NOT = { has_leader_flag = xvcv_mdlc_leader_trait_shared_memory_target_@this }
		}
		# log = "Leveling \\[prev.xvcv_total_class_specific_leaders_under_level_2] scientists level below 2"
		root = { xvcv_mdlc_set_memory_share_level_up_happened_for_scientist = yes }
		set_timed_leader_flag = { flag = xvcv_mdlc_leader_trait_shared_memory_target_@this days = 1 }
		add_skill_without_trait_selection = 1
	}
}
# Call from the create_species effect block when creating a synth species to set planet preference.
# prev: Original species
# this: New synth species
oxr_mdlc_set_custom_species_habitability = {
	if = {
		limit = {
			prev = {
				OR = {
					has_trait = trait_pc_desert_preference
					has_trait = trait_pc_arid_preference
					has_trait = trait_pc_savannah_preference
					has_trait = trait_dry_planet_preference
				}
			}
		}
		change_species_characteristics = {
			add_trait = oxr_mdlc_trait_dry_planet_preference
			add_traits_at_start_of_list = yes
		}
		log = "Changed species: added dry planet preference to \\[This.species.GetName]"
	}
	else_if = {
		limit = {
			prev = {
				OR = {
					has_trait = trait_pc_tropical_preference
					has_trait = trait_pc_continental_preference
					has_trait = trait_pc_ocean_preference
					has_trait = trait_wet_planet_preference
				}
			}
		}
		change_species_characteristics = {
			add_trait = oxr_mdlc_trait_wet_planet_preference
			add_traits_at_start_of_list = yes
		}
		log = "Changed species: added wet planet preference to \\[This.species.GetName]"
	}
	else_if = {
		limit = {
			prev = {
				OR = {
					has_trait = trait_pc_arctic_preference
					has_trait = trait_pc_tundra_preference
					has_trait = trait_pc_alpine_preference
					has_trait = trait_cold_planet_preference
				}
			}
		}
		change_species_characteristics = {
			add_trait = oxr_mdlc_trait_frozen_planet_preference
			add_traits_at_start_of_list = yes
		}
		log = "Changed species: added frozen planet preference to \\[This.species.GetName]"
	}
	else_if = {
		limit = { 
			prev = {
				OR = {
					has_trait = trait_machine_habitat_planet_preference
					has_trait = trait_pc_habitat_preference 
				}
			}
		}
		change_species_characteristics = {
			add_trait = oxr_mdlc_trait_pc_habitat_preference
			add_traits_at_start_of_list = yes
		}
		log = "Changed species: added habitat preference"
	}
	else_if = {
		limit = {
			prev = { 
				OR = {
					has_trait = trait_pc_shattered_ring_habitable_preference
					has_trait = trait_machine_pc_shattered_ring_habitable_preference
				}
			}
		}
		change_species_characteristics = {
			add_trait = oxr_mdlc_trait_pc_ringworld_habitable_preference
			add_traits_at_start_of_list = yes
		}
		log = "Changed species: add ringworld pref "
	}
	else = {
		random_list = {
			1 = {
				change_species_characteristics = {
					add_trait = oxr_mdlc_trait_dry_planet_preference
					add_traits_at_start_of_list = yes
				}
				log = "changed species to randomly have dry planet preference"
			}
			1 = {
				change_species_characteristics = {
					add_trait = oxr_mdlc_trait_wet_planet_preference
					add_traits_at_start_of_list = yes
				}
				log = "changed species to randomly have wet planet peference"
			}
			1 = {
				change_species_characteristics = {
					add_trait = oxr_mdlc_trait_frozen_planet_preference
					add_traits_at_start_of_list = yes
				}
				log = "Changed species to randomly have frozen planet preference"
			}
		}
	}
	# Void dweller
	if = {
		limit = { prev = { has_trait = trait_void_dweller_1 } }
		change_species_characteristics = {
			add_trait = oxr_mdlc_trait_void_dweller_1
		}
		log = "Changed species: added void dweller 1 to species"
	}
	else_if = {
		limit = { prev = { has_trait = trait_void_dweller_2 } }
		change_species_characteristics = {
			add_trait = oxr_mdlc_trait_void_dweller_2
		}
		log = "Changed species: Added void dweller 2 to species"
	}
}
# Remove the automatically assigned habitability at game start
# Add mechanical preference BACK
oxr_mdlc_set_mechanical_heritage_species_habitability = {
	optimize_memory
	if = {
		limit = { prev = { has_trait = trait_cold_planet_preference } }
		change_species_characteristics = { remove_trait = trait_cold_planet_preference }
	}
	else_if = {
		limit = { prev = { has_trait = trait_dry_planet_preference } }
		change_species_characteristics = { remove_trait = trait_dry_planet_preference }
	}
	else_if = {
		limit = { prev = { has_trait = trait_wet_planet_preference } }
		change_species_characteristics = { remove_trait = trait_wet_planet_preference }
	}
	change_species_characteristics = {
		add_trait = trait_xvcv_mdlc_pc_mechanical_preference
		add_traits_at_start_of_list = yes
	}
}

# corpse processor helper effects
oxr_mdlc_show_full_assimilation_message = {
	create_message = {
		type = XVCV_MDLC_CIVIC_ASSIMILATING_SWARM_MESSAGE_TYPE
		localization = $MESSAGE$
		days = 10
		target = this
		variable = {
			type = name
			localization = XVCV_MDLC_CIVIC_ASSIMILATING_SWARM_PLANET
			scope = this
		}
		variable = {
			type = variable
			localization = XVCV_MDLC_CIVIC_ASSIMILATING_SWARM_PLANET_AMOUNT
			varname = oxr_mdlc_corpse_processor_amount_tmp
			scope = this
		}
	}
}

oxr_mdlc_species_swap_organic_for_robot_traits = {
    # This only covers vanilla traits.. and not all of them either
    # $SOURCE$ - source species (organic)
    # $TARGET$ - target species (robot/machine)
    # bio traits can't be added so we add the machine version
    $SOURCE$ = {
        switch = {
            trigger = has_trait
            trait_auto_mod_biological = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_auto_mod_robotic } }
            }
            trait_agrarian = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_harvesters } }
            }
            trait_ingenious = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_superconductive } }
            }
            trait_industrious = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_power_drills } }
            }
            trait_intelligent = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_logic_engines } }
            }
            trait_thrifty = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_trading_algorithms } }
            }
            trait_natural_engineers = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_artificial_engineers } }
            }
            trait_natural_physicists = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_artificial_physicists } }
            }
            trait_natural_sociologists = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_artificial_sociologists } }
            }
            trait_extremely_adaptive = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_shielded_components } }
                log = "Added trait_robot_shielded_components to processed pop"
            }
            # no equivalent
            # trait_adaptive
            # trait_nonadaptive
            trait_rapid_breeders = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_custom_made } }
            }
            trait_slow_breeders = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_luxurious } }
            }
            trait_talented = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_enhanced_memory } }
            }
            trait_quick_learners = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_learning_algorithms } }
            }
            trait_slow_learners = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_repurposed_hardware } }
            }
            trait_traditional = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_propaganda_machines } }
            }
            trait_quarrelsome = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_quarrelsome } }
            }
            trait_docile = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_streamlined_protocols } }
            }
            trait_unruly = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_high_bandwidth } }
            }
            trait_very_strong = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_integrated_weaponry } }
            }
            trait_strong = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_history_warbot } }
            }
            trait_weak = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_delicate_frames } }
            }
            # trait_nomadic - no match
            # trait_sedentary - no match
            trait_communal = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_double_jointed } }
            }
            trait_solitary = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_bulky } }
            }
            trait_charismatic = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_emotion_emulators } }
            }
            trait_repugnant = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_uncanny } }
            }
            # trait_uplifted - no match
            # trait_conformists - no match
            trait_deviants = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_deviants } }
            }
            trait_venerable = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_shielded_components } }
            }
            trait_enduring = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_survivor } }
            }
            # trait_fleeting - no match
            # trait_fleeting_lithoid - no match
            trait_decadent = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_decadent } }
            }
            # trait_resilient - no match
            # trait_conservational - no match
            trait_wasteful = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_wasteful } }
            }
            trait_wasteful = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_wasteful } }
            }
            # trait_cybernetic - no match
            # trait_latent_psionic - no match
            # trait_psionic - no match
            # trait_self_modified - no match
            trait_survivor = {
                $TARGET$ = { oxr_mdlc_species_modify_add_trait = { t = trait_robot_survivor } }
            }
            # and that ends here (tm)
        }
    }
}

oxr_mdlc_species_modify_add_trait = {
    modify_species = {
        add_trait = $t$
    }
}
