# Python code to help generate all the leader-making traits code
import argparse
import os
import time
import sys
from json import load as json_load

from pipeline.compile.utils import (
    write_build_scripted_trigger,
    write_build_file,
)
from pipeline.compile.core_modifying_effects import (
    gen_core_modifying_button_effects_code,
    gen_xvcv_mdlc_core_modifying_reset_traits_button_effect_lines,
    gen_xvcv_mdlc_core_modifying_still_has_subclass_traits_picked,
)   
from pipeline.compile.core_modifying_gui import iterate_subclasses_make_core_modifying_subclasses_gui_code, iterate_traits_make_coremodifying_gui_code
from pipeline.compile.core_modifying_triggers import gen_xvcv_mdlc_core_modifying_ruler_traits_trigger
from pipeline.compile.leader_making_button_effects import (
    gen_leader_making_button_effects_code,
    gen_xvcv_mdlc_leader_making_clear_values_effect,
    gen_xvcv_mdlc_leader_making_start_button_effect,
    iterate_traits_make_leadermaking_effects_code,
)
from pipeline.compile.leader_making_gui import iterate_traits_make_leadermaking_gui_code
from pipeline.compile.leader_making_tooltips import iterate_traits_make_leadermaking_tooltips_code
from pipeline.compile.generate_trait_tooltips import create_tooltip_for_leader
from pipeline.mre_common_vars import (
    BUILD_EFFECTS_FOLDER,
    BUILD_FOLDER,
    BUILD_TEMPLATE_FOLDER,
    BUILD_TRIGGERS_FOLDER,
    COMPILE_FOLDER,
    EXTRACT_FOLDER,
    INPUT_FILES_FOR_CODEGEN,
    LEADER_MAKING,
    CORE_MODIFYING,
    LEADER_SUBCLASSES,
    LEADER_CLASSES,
    MOD_SCRIPTED_EFFECTS_FOLDER,
    MOD_SCRIPTED_TRIGGERS_FOLDER,
    OUTPUT_FILES_DESTINATIONS,
    LOCALISATION_HEADER,
    MACHINE_LOCALISATIONS_MAPFILE,
    EXCLUDE_TRAITS_FROM_CORE_MODIFYING,
    AUTOGENERATED_HEADER,
    RARITIES,
    MOD_BUTTON_EFFECTS_FOLDER,
)
INDENT = "				"

# Generic version (can be used with both leader_making and core_modifying)
def iterate_traits_make_feature_button_effects_code(organized_traits_dict, for_class, feature):
    leader_trait_button_effects_copypaste_blob = [AUTOGENERATED_HEADER]
    for rarity_level in RARITIES:
        for leader_trait in organized_traits_dict[f"{feature}_traits"][rarity_level]:
            trait_name = [*leader_trait][0]
            root = leader_trait[trait_name]
            if feature == LEADER_MAKING:
                feature_button_effects_code = gen_leader_making_button_effects_code(
                    leader_class=for_class,
                    trait_name=trait_name,
                    is_veteran_trait=(root.get('rarity')=="veteran"),
                    is_destiny_trait=(root.get('rarity')=="paragon"),
                    required_subclass=root.get('required_subclass', None),
                    prerequisites=root.get('prerequisites', [])
                )
            elif feature == CORE_MODIFYING:
                if EXCLUDE_TRAITS_FROM_CORE_MODIFYING.get(trait_name):
                    continue
                feature_button_effects_code = gen_core_modifying_button_effects_code(
                    leader_class=for_class,
                    trait_name=trait_name,
                    rarity=root['rarity'],
                    required_subclass=root.get('required_subclass', None),
                    prerequisites=root.get('prerequisites', [])
                )
                
            leader_trait_button_effects_copypaste_blob.append(feature_button_effects_code)
    return '\n'.join(leader_trait_button_effects_copypaste_blob)


    sys.exit("iterate_traits_make_coremodifying_effects_code not implemented yet.")

def generate_fx_tooltips_interfaces_for_all_guis():
    """ This process will make 3 sets of the below files for each leader class, so 18 in total:
        Replacing 'commander' with 'official and 'scientist' for the other 2 sets.

        86_mre_autogenerated_core_modifying_commander_gui.txt
        86_mre_autogenerated_core_modifying_commander_effects.txt
        86_mre_autogenerated_core_modifying_commander_tooltips.txt
        86_mre_autogenerated_leader_making_commander_gui.txt
        86_mre_autogenerated_leader_making_commander_effects.txt
        86_mre_autogenerated_leader_making_commander_tooltips.txt

        Effects and tooltips files can directly replace game mod files,
        but only the code in each gui.txt file needs to be copy/pasted into its destination.
    """
    """ TODO: Deposit localisation and button effects directly into their game code files """
    for input_file in INPUT_FILES_FOR_CODEGEN:
        for feature_type in (LEADER_MAKING, CORE_MODIFYING):
            for generated_code_type in ["effects","gui","tooltips"]:
                run_codegen_process_for_ingame_feature(
                    input_file, generated_code_type=generated_code_type, feature=feature_type,
                    write_directly_to_mod_files=True
                )


# Generic version
def iterate_traits_make_feature_tooltips_code(
        organized_traits_dict, for_class, feature="leader_making", machine_localisations_map=None
    ):
    """ Generate tooltips code for either 'leader_making' or 'core_modifying' feature """
    leader_tooltips_copypaste_blob = [AUTOGENERATED_HEADER]
    for rarity_level in RARITIES:
        for leader_trait in organized_traits_dict[f"{feature}_traits"][rarity_level]:
            tooltip_code_for_leadermaking_trait = create_tooltip_for_leader(
                trait_dict=leader_trait, leader_class=for_class, feature=feature,
                machine_localisations_map=machine_localisations_map
            )
            leader_tooltips_copypaste_blob.append(tooltip_code_for_leadermaking_trait)
    return LOCALISATION_HEADER + ''.join(leader_tooltips_copypaste_blob)

## These methods are wrappers so we can run more things from mre_run_trait_pipeline
def pipeline_make_leader_start_button_code():
    """ Write leader_making start button effects code for 3 leader classes to 3 separate files """

    trigger_file_name = "85_leader_making_start_button_effect_part_{leader_class}.txt"

    for codegen_ready_file in INPUT_FILES_FOR_CODEGEN:
        leader_class = codegen_ready_file.split('/')[-1].split('_')[2]
        # Read
        input_filepath = os.path.join(BUILD_FOLDER, codegen_ready_file)
        with open(input_filepath, "r") as traits_json_file:
            buffer = json_load(traits_json_file)
        # Generate
        trigger_blob_for_writing = gen_xvcv_mdlc_leader_making_start_button_effect(
            buffer, for_class=leader_class)
        # Write
        template_file_part_path = os.path.join(
            BUILD_TEMPLATE_FOLDER,
            trigger_file_name.format(leader_class=leader_class)
        )
        with open(template_file_part_path, "w") as start_button_code_part_file:
            start_button_code_part_file.write(
                trigger_blob_for_writing
            )
        # Done with the part that needs to be stitched
        print(f"++ Wrote xvcv_mdlc_leader_making_start_button_effect part for {leader_class}")


def pipeline_stitch_xvcv_mdlc_leader_making_start_button_effect():
    # official, scientist, commander
    # 85_leader_making_start_button_effect_
    templates_src_folder = os.path.join(
        os.getcwd(),'mre_code_tools','templates', 'button_effects'
    )

    template_files_to_be_stitched = [
        os.path.join(templates_src_folder, "xvcv_mdlc_leader_making_start_button_effect_1_pre.txt"),
        os.path.join(BUILD_TEMPLATE_FOLDER,"85_leader_making_start_button_effect_part_official.txt"),
        os.path.join(templates_src_folder,"xvcv_mdlc_leader_making_start_button_effect_2_pre_scientist.txt"),
        os.path.join(BUILD_TEMPLATE_FOLDER,"85_leader_making_start_button_effect_part_scientist.txt"),
        os.path.join(templates_src_folder,"xvcv_mdlc_leader_making_start_button_effect_3_pre_commander.txt"),
        os.path.join(BUILD_TEMPLATE_FOLDER,"85_leader_making_start_button_effect_part_commander.txt"),
        os.path.join(templates_src_folder,"xvcv_mdlc_leader_making_start_button_effect_4_footer.txt")
    ]

    dest_file_name = "xvcv_mdlc_button_effects_leader_making_start_button_effect.txt"
    dest_file_path = os.path.join(MOD_BUTTON_EFFECTS_FOLDER, dest_file_name)
    with open(dest_file_path, "w") as dest_file:
        dest_file.write(AUTOGENERATED_HEADER)
    with open(dest_file_path, "a") as dest_file:
        for stitch_file_path in template_files_to_be_stitched:
            with open(stitch_file_path, "r") as stitch_file:
                dest_file.write(stitch_file.read())
    print(f"++ Stitched and installed {dest_file_path} (we hope)")


def pipeline_make_xvcv_mdlc_core_modifying_ruler_traits_trigger():
    input_files_in_build_folder = [
        os.path.join(BUILD_FOLDER, codegen_ready_file)
        for codegen_ready_file in INPUT_FILES_FOR_CODEGEN
    ]
    trigger_blob_for_writing = gen_xvcv_mdlc_core_modifying_ruler_traits_trigger(input_files_in_build_folder)
    trigger_filename = "85_core_modifying_modifying_ruler_trait_trigger.txt"
    # Write to build folder
    write_build_scripted_trigger(trigger_blob_for_writing, trigger_filename, "core modifying ruler")


def pipeline_make_leader_making_clear_values_effect():
    blob_for_writing = gen_xvcv_mdlc_leader_making_clear_values_effect()
    # write to build folder
    blob_filename = "85_leader_making_clear_values_effect.txt"

    write_build_file(
        blob_for_writing, blob_filename, BUILD_EFFECTS_FOLDER, "LEADER MAKING CLEAR VALUES"
    )


def pipeline_make_xvcv_mdlc_core_modifying_reset_traits_button_effect_lines():
    input_files_in_build_folder = [
        os.path.join(BUILD_FOLDER, codegen_ready_file)
        for codegen_ready_file in INPUT_FILES_FOR_CODEGEN
    ]
    blob_filename = "85_core_modifying_reset_traits_button_effect.txt"
    blob_for_writing = gen_xvcv_mdlc_core_modifying_reset_traits_button_effect_lines(input_files_in_build_folder)

    write_build_file(
        blob_for_writing, blob_filename, MOD_BUTTON_EFFECTS_FOLDER, "LEADER MAKING CLEAR VALUES"
    )

def pipeline_make_xvcv_mdlc_core_modifying_still_has_subclass_traits_picked():
    input_files_in_build_folder = [
        os.path.join(BUILD_FOLDER, codegen_ready_file)
        for codegen_ready_file in INPUT_FILES_FOR_CODEGEN
    ]
    blob_filename = "85_core_modifying_still_has_subclass_traits_picked.txt"
    blob_for_writing = gen_xvcv_mdlc_core_modifying_still_has_subclass_traits_picked(input_files_in_build_folder)

    write_build_file(
        blob_for_writing, blob_filename, MOD_SCRIPTED_TRIGGERS_FOLDER, "CORE MODIFYING "
    )


def pipeline_make_core_modifying_subclasses_gui_code():
    target_file = "85_core_modifying_subclasses_gui_code.txt"
    build_path_target = os.path.join(
        BUILD_FOLDER, target_file
    )
    gui_blob_for_writing = iterate_subclasses_make_core_modifying_subclasses_gui_code(LEADER_SUBCLASSES)
    with open(build_path_target, "w") as subclasses_gui_outfile:
        subclasses_gui_outfile.write(gui_blob_for_writing)
    print(f"Wrote CORE MODIFYING SUBCLASSES GUI code to {build_path_target}")


# def pipeline_make_core_modifying_list_traits_by_class():
#     """ Collect & list traits for a class which have subclass requirements
#         These are used to check in the core modifying gui
#         to prevent players from removing a subclass while depdendent traits are picked
#     """
#     subtraits_names = {
#         "commander": [],
#         "official": [],
#         "scientist": []
#     }
#     buffer = ''
#     for codegen_ready_file in INPUT_FILES_FOR_CODEGEN:
#         leader_class = codegen_ready_file.split('_')[2]
#         input_filepath = os.path.join(BUILD_FOLDER, codegen_ready_file)
#         with open(input_filepath, "r") as traits_json_file:
#             buffer = json_load(traits_json_file)
#         for rarity_level in RARITIES:
#             # iterate common, veteran, paragon
#                 for leader_trait in buffer[f"core_modifying_traits"][rarity_level]:
#                     trait_name = [*leader_trait][0]
#                     root = leader_trait[trait_name]
#                     if root.get('required_subclass'):
#                         subtraits_names[leader_class].append(
#                             f"has_trait = {trait_name}"
#                         )
#     outfile_name = "85_core_modifying_subclass_dependent_traits.txt"
#     outfile_path = os.path.join(
#         BUILD_FOLDER, outfile_name
#     )
#     with open(outfile_path, "w") as outfile_object:
#         for ruler_class in LEADER_CLASSES:
#             a_blob_00 = f"""#{ruler_class} traits requiring subclasses:
# {"\n".join(sorted(subtraits_names[ruler_class]))}
# """
#             outfile_object.write(a_blob_00)
#     print("I am so tired")
#     print(f"Look in {outfile_name}")



##################
### THE BIG ONE ##
##################

def run_codegen_process_for_ingame_feature(
    input_codegen_json_file_name,
    generated_code_type,
    feature,
    write_directly_to_mod_files=False
):
    """ Do all code gen for core_modifying and leader_making
    This assumes it is being called from the mod root, not mre_code_tools
    so it can find the common and localisation folders
    """
    buffer = ''
    if 'commander' in input_codegen_json_file_name:
        detected_leader_class = 'commander'
    elif 'scientist' in input_codegen_json_file_name:
        detected_leader_class = 'scientist'
    elif 'official' in input_codegen_json_file_name:
        detected_leader_class = 'official'
    # detected_leader_class = input_codegen_json_file_name.split('_')[2]
    # breakpoint()
    leadermaking_code_outfile = f"86_mre_autogenerated_{feature}_{detected_leader_class}_{generated_code_type}.txt"
    if write_directly_to_mod_files:
        if generated_code_type == "gui":
            output_file_name = os.path.join(
                BUILD_FOLDER,
                leadermaking_code_outfile
            )
        else:
            # There's a dictionary with all the output files mapped
            # For each feature, code type, and class .. It'll write 12 of those files
            # We dont write to the GUI files, so that is why the above is excluded
            output_file_name = OUTPUT_FILES_DESTINATIONS[feature][generated_code_type][detected_leader_class]
    else:
        output_file_name = os.path.join(
            BUILD_FOLDER,
            leadermaking_code_outfile
        )
    input_file_path = os.path.join(COMPILE_FOLDER, input_codegen_json_file_name.split(os.sep)[-1])
    # breakpoint()
    with open(input_file_path, "r") as source_codegen_data:
        buffer = json_load(source_codegen_data)
    
    generated_leadermaking_code_blob = ''
    if generated_code_type == "tooltips":
        machine_localisations_file_path = os.path.join(
            BUILD_FOLDER, MACHINE_LOCALISATIONS_MAPFILE
        )
        localisations_buffer = {}
        with open(machine_localisations_file_path, "r") as machine_map_data:
            localisations_buffer = json_load(machine_map_data)
        # This method works for both core_modifying and leader_making
        generated_leadermaking_code_blob = iterate_traits_make_feature_tooltips_code(
            buffer,
            for_class=detected_leader_class,
            feature=feature,
            machine_localisations_map=localisations_buffer
        )
    elif generated_code_type == "gui":
        if feature == CORE_MODIFYING:
            generated_leadermaking_code_blob = iterate_traits_make_coremodifying_gui_code(
                buffer,
                for_class=detected_leader_class
            )
        elif feature == LEADER_MAKING:
            generated_leadermaking_code_blob = iterate_traits_make_leadermaking_gui_code(
                buffer,
                for_class=detected_leader_class
            )
    elif generated_code_type == "effects":
        generated_leadermaking_code_blob = iterate_traits_make_feature_button_effects_code(
            buffer,
            for_class=detected_leader_class,
            feature=feature
        )
    with open(output_file_name, "wb") as leadermaking_code_outfile:
        sys.stdout.write(f"Writing {detected_leader_class} {feature} {generated_code_type} code to {output_file_name}\n")
        mod_file_encoding = 'utf-8-sig' if generated_code_type == 'tooltips' else 'utf-8'
        leadermaking_code_outfile.write(
            generated_leadermaking_code_blob.encode(mod_file_encoding)
        )


if __name__ == "__main__":
    start_time = time.time()
    parser = argparse.ArgumentParser(
        prog="0xRetro Machine & Robot Expansion Mod Codegen Tools",
        description="Automatically spew out mod code"
    )
    parser.add_argument(
        '--infile',
        help='A traits JSON file that we processed, like 99_mre_commander_traits_for_codegen.json, created from mre_process_traits_for_codegen.py.',
        required=False
    )
    parser.add_argument(
        '--tooltips',
        help="Generate M&RE trait tooltips, given a traits JSON file that was processed by mre_process_traits_for_codegen",
        action="store_true",
        required=False
    )
    parser.add_argument(
        '--effects',
        help="Generate effects code from trait files",
        action="store_true",
        required=False
    )
    parser.add_argument(
        '--gui',
        help="Generate GUI code for leadermaking feature, from trait files",
        action="store_true",
        required=False
    )
    parser.add_argument(
        '--core_trigger',
        help="Generate xvcv_mdlc_core_modifying_ruler_traits_trigger",
        action="store_true",
        required=False
    )
    parser.add_argument(
        '--core_reset',
        help="Generate hidden effect list for xvcv_mdlc_core_modifying_reset_traits_button_effect",
        action="store_true",
        required=False
    )
    parser.add_argument(
        '--leader_fx1',
        help="Generate xvcv_mdlc_leader_making_clear_values_effect",
        action="store_true",
        required=False
    )
    parser.add_argument(
        "--core_subclasses_gui",
        help="Generate GUI code for subclass pickers for core-modifying feature",
        action="store_true",
        required=False
    )
    parser.add_argument(
        "--leader_start_button",
        help="Generate contents for leader_making_start_button effect. Three effects blocks per leader class",
        action="store_true",
        required=False
    )
    parser.add_argument(
        '--core_ruler_subclass_traits',
        help="Make a list of traits that require subclasses, for the core modifying GUI",
        action="store_true",
        required=False
    )
    parser.add_argument(
        '--process_all',
        help="The Big One. Generate M&RE tooltips, GUI code, button effects code, assuming all traits files were processed by mre_process_traits_for_codegen",
        action="store_true"
    )
    args = parser.parse_args()
    # Args that dont need an infile
    if args.process_all:
        generate_fx_tooltips_interfaces_for_all_guis()
        sys.exit()

    # if args.leader_start_button:
    #     """ Iterate the 99_ files, emit blocks of code for each leader class
    #     that then gets copy/pasted by a hum0n into xvcv_mdlc_button_effects_leader_making_main_customgui.txt"""
    #     pipeline_make_leader_start_button_code()
    #     sys.exit()
    if args.core_trigger:
        pipeline_make_xvcv_mdlc_core_modifying_ruler_traits_trigger()
        sys.exit()
    if args.leader_fx1:
        pipeline_make_leader_making_clear_values_effect()
        sys.exit()
    if args.core_reset:
        pipeline_make_xvcv_mdlc_core_modifying_reset_traits_button_effect_lines()
        sys.exit()
    if args.core_subclasses_gui:
        pipeline_make_core_modifying_subclasses_gui_code()
        sys.exit()
    # if args.core_ruler_subclass_traits:
    #     pipeline_make_core_modifying_list_traits_by_class()
    #     sys.exit()

    buffer = ''
    infile_no_ext = args.infile.rsplit('.',1)[0]
    with open(args.infile) as organized_traits_file:
        buffer = json_load(organized_traits_file)

    if args.tooltips:
        target_file = f"{infile_no_ext}_leadermaking_tooltips.txt"
        detected_leader_class = args.infile.split('_')[2]
        tooltips_blob_for_writing = iterate_traits_make_leadermaking_tooltips_code(
            buffer, for_class=detected_leader_class)
        with open(target_file, "wb") as leadermaking_effects_output:
            sys.stdout.write(f"Writing leadermaking tooltips code to {leadermaking_effects_output.name}\n")
            leadermaking_effects_output.write(
                tooltips_blob_for_writing.encode('utf-8')
            )
        sys.exit()
    if args.effects:
        detected_leader_class = args.infile.split('_')[2]
        effects_blob_for_writing = iterate_traits_make_leadermaking_effects_code(
            buffer, for_class=detected_leader_class)
        with open(f"{infile_no_ext}_leadermaking_effects.txt", "wb") as leadermaking_effects_output:
            sys.stdout.write(f"Writing leadermaking effects code to {leadermaking_effects_output.name}\n")
            leadermaking_effects_output.write(
                effects_blob_for_writing.encode('utf-8')
            )
            sys.exit()
    if args.gui:
        detected_leader_class = args.infile.split('_')[2]
        gui_blob_for_writing = iterate_traits_make_leadermaking_gui_code(
            buffer, for_class=detected_leader_class)
        with open(f"{infile_no_ext}_leadermaking_gui.txt", "wb") as leadermaking_gui_output:
            sys.stdout.write(f"Writing leadermaking gui code to {leadermaking_gui_output.name}\n")
            leadermaking_gui_output.write(
                gui_blob_for_writing.encode('utf-8')
            )
            sys.exit()
