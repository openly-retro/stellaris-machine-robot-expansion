""" District grid boxes for each district type """

from pathlib import Path
from os import path as os_path
from shutil import copyfile
from sys import exit as sys_exit
from yaml import load, dump
# why cant the code see this module ??
# from pipeline.mre_common_vars import AUTOGENERATED_HEADER

BLUE = "BLUE"
YELLOW = 'YELLOW'
GREEN = 'GREEN'
RED = 'RED'
PURPLE = 'PURPLE'
CYAN = 'CYAN'
WHITE = 'WHITE'
ORANGE = 'ORANGE'
MINT = 'MINT'
GRAY = 'GRAY'

DISTRICT_COLORS = [
    BLUE, YELLOW, GREEN, RED, PURPLE, CYAN, WHITE, ORANGE, MINT, GRAY
]


DISTRICTS = {
    # AUTO
    "xvcv_mdlc_pc_machine_auto_district_city": BLUE,
    "xvcv_mdlc_pc_machine_auto_district_nexus": BLUE,
    "xvcv_mdlc_pc_machine_auto_district_industrial_origin_wm": ORANGE,
    "xvcv_mdlc_pc_machine_auto_district_generator": YELLOW,
    "xvcv_mdlc_pc_machine_auto_district_mining": RED,
    "xvcv_mdlc_pc_machine_auto_district_farming": GREEN,
    # ECU
    "xvcv_mdlc_pc_machine_ecu_district_cooling_primary": BLUE,
    "xvcv_mdlc_pc_machine_ecu_district_production": ORANGE,
    "xvcv_mdlc_pc_machine_ecu_district_rare_resources": GREEN,
    "xvcv_mdlc_pc_machine_ecu_district_naval_cap": RED,
    # SER
    "xvcv_mdlc_pc_machine_ser_district_cooling_primary": BLUE,
    "xvcv_mdlc_pc_machine_ser_district_unity": CYAN,
    "xvcv_mdlc_pc_machine_ser_district_logistics": PURPLE,
    "xvcv_mdlc_pc_machine_ser_district_crime": RED,
    # CPU
    "xvcv_mdlc_pc_machine_cpu_district_cooling_primary": CYAN,
    "xvcv_mdlc_pc_machine_cpu_district_physics": BLUE,
    "xvcv_mdlc_pc_machine_cpu_district_society": GREEN,
    "xvcv_mdlc_pc_machine_cpu_district_engineering": ORANGE,
    # MECHANICAL
    "xvcv_mdlc_pc_mechanical_district_city": BLUE,
    "xvcv_mdlc_pc_mechanical_district_generator": YELLOW,
    "xvcv_mdlc_pc_mechanical_district_mining": RED,
    "xvcv_mdlc_pc_mechanical_district_farming": GREEN,
    # AUTO RING
    "xvcv_mdlc_pc_ringworld_machine_auto_district_primary": BLUE,
    "xvcv_mdlc_pc_ringworld_machine_auto_district_rnd": CYAN,
    "xvcv_mdlc_pc_ringworld_machine_auto_district_industrial": ORANGE,
    "xvcv_mdlc_pc_ringworld_machine_auto_district_raw_resource": GREEN,
    "xvcv_mdlc_pc_ringworld_machine_auto_district_generator": YELLOW,
    "xvcv_mdlc_pc_ringworld_machine_auto_district_farming": GREEN,
    # VIRTUAL
    "xvcv_mdlc_pc_virtual_district_primary": BLUE,
    "xvcv_mdlc_pc_virtual_district_research": CYAN,
    "xvcv_mdlc_pc_virtual_district_admin": WHITE,
    "xvcv_mdlc_pc_virtual_district_amenity": PURPLE,
}

def get_src_path(path:str, dds_file_name: str) -> str:
    """ shortcut for os.path.join on path and filename """

    return os_path.join(
        path, dds_file_name
    )

def make_default_src_path(color: str) -> dict:
    """ look at our source images, and return paths to the images """

    grid_box_path = os_path.join(
        'gfx', 'interface', 'icons', 'districts', 'grid_box', 'base_colors'
    )

    return {
        'grid_box': get_src_path(grid_box_path, f'{color.lower()}.dds'),
        'grid_box_big': get_src_path(grid_box_path, f'{color.lower()}_big.dds'),
        'grid_box_rect': get_src_path(grid_box_path, f'{color.lower()}_rectangle.dds'),
    }


def generate_base_grid_box_references() -> dict:
    """ return a dict like
        {
            BLUE: {
                'grid_box': 'gfx/interface/icons/districts/grid_box/base_colors/blue.dds',
                'grid_box_big': 'gfx/interface/icons/districts/grid_box/base_colors/blue_big.dds',
                'grid_box_rect': 'gfx/interface/icons/districts/grid_box/base_colors/blue_rectangle.dds'
            },
            ...
        }
    """
    return {
        color: make_default_src_path(color)
        for color in DISTRICT_COLORS
    }


def map_grid_box_images_to_districts(districts_color_map: dict) -> dict:
    """
    For each district, take the color assigned to it, and drop in
    :param districts_color_map: dict District names with color as key value
    """
    locations_of_grid_box_images = generate_base_grid_box_references()

    destination_grid_box_path = os_path.join(
        'gfx', 'interface', 'icons', 'districts', 'grid_box'
    )

    for district_name in DISTRICTS:
        district_grid_box_color = DISTRICTS[district_name]
        source_grid_box_info = locations_of_grid_box_images[district_grid_box_color]
        source_grid_box = source_grid_box_info['grid_box']
        source_grid_box_large = source_grid_box_info['grid_box_big']
        source_rectangle = source_grid_box_info['grid_box_rect']

        target_grid_box_dds = os_path.join(
            destination_grid_box_path, f"{district_name}.dds"
        )
        target_grid_box_large = os_path.join(
            destination_grid_box_path, f"{district_name}_big.dds"
        )
        target_rectangle = os_path.join(
            destination_grid_box_path, f"{district_name}_rectangle.dds"
        )
        copied_grid_box = copyfile(
            source_grid_box, target_grid_box_dds
        )
        copied_grid_box_large = copyfile(
            source_grid_box_large, target_grid_box_large
        )
        copied_rectangle = copyfile(
            source_rectangle, target_rectangle
        )
        assert os_path.isfile(copied_grid_box)
        assert os_path.isfile(copied_grid_box_large)
        assert os_path.isfile(copied_rectangle)
        print(
            f"Copied grid box and grid box large for {district_name}. "
            f"Source color was {district_grid_box_color.upper()}"
        )

def make_district_gfx_icons_spritetypes():
    """ Write spriteType definitions to oxr_mdlc_icons_world_machines_districts.gfx """

    gfx_spritetypes_text_container = """
spriteTypes = {{
    {content}
}}
"""
    spritetype_animation_block = """
        effectFile = "gfx/FX/buttonstate_onlydisable.shader"
		noOfFrames = 3
		animation = {
			animationmaskfile = "gfx/interface/icons/districts/grid_box/default_animated_mask.dds"
			animationtexturefile = "gfx/interface/icons/districts/grid_box/default_animated_texture.dds"
			animationrotation = 90.0
			animationlooping = yes
			animationtime = 2.0
			animationdelay = 0.0
			animationblendmode = "add"
			animationtype = "pulsing"
			animationrotationoffset = { x = 0.0 y = 0.0 }
			animationtexturescale = { x = 1.0 y = 1.0 }
		}
"""

    sprite_type_block_bg = """
    spriteType = {{
		name = "GFX_{district_name}_bg"
		texturefile = "gfx/interface/planetview/district_backgrounds/{district_name}_bg.dds"
	}}
"""

    sprite_type_block_rectangle = """
    spriteType = {{
        name = "GFX_{district_name}_box_icon_rectangle"
        textureFile = "gfx/interface/icons/districts/grid_box/{district_name}_rectangle.dds"
        {animation_block}
    }}
"""

    content_buffer = []
    for district_name in DISTRICTS:
        district_bg_block = sprite_type_block_bg.format(district_name=district_name)
        district_rectangle_block = sprite_type_block_rectangle.format(
            district_name=district_name,
            animation_block=spritetype_animation_block
        )
        # don't do BG for now
        # content_buffer.append(district_bg_block)
        content_buffer.append(district_rectangle_block)
    
    target_gfx_file = os_path.join(
        'interface', 'oxr_mdlc_icons_world_machines_districts.gfx'
    )
    with open(target_gfx_file, 'w') as gfx_file:
        file_contents = gfx_spritetypes_text_container.format(
            content="\n".join(content_buffer)
        )
        outsize = gfx_file.write(file_contents)
        print(
            f"Wrote {outsize} bytes to {target_gfx_file}"
        )



if __name__ == "__main__":
    print(
        "0xRetro MREC: District grid box DDS file maker. \n"
        "Copy grid box files to what they should be named for the districts in this mod.\n"
        f"Going to copy files for {len(DISTRICTS)}."
    )
    if not os_path.exists(
        'gfx'
    ):
        sys_exit(
            "Must run this from the base mod folder. Need to see the 'gfx' folder."
        )

    map_grid_box_images_to_districts(DISTRICTS)
    make_district_gfx_icons_spritetypes()
    print("Done... we hope.")
