namespace = xvcv_mdlc_customgui

#leader making
country_event = {
	id = xvcv_mdlc_customgui.1
	title = "xvcv_mdlc_customgui.1.name"
	desc = "xvcv_mdlc_customgui.1.desc"
	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = { portrait = root.ruler } #to remove "[06:59:30][portraitobject.cpp:493]: Failed to find portrait selector" error log

	immediate = {
		xvcv_mdlc_leader_making_clear_traits_variables_effect = yes
		set_variable = { which = xvcv_mdlc_leader_making_start_number value = 1 } #one-time only
		# Reset the maximum allowed leader level each time the GUI opens,
		# and re-evaluate it.
		oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 1 }
		oxr_mdlc_leader_making_set_leader_skill_level = { LEVEL = 0 }
		if = {
			limit = { any_owned_leader = { has_base_skill >= 2 } }
			oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 2 }
		}
		if = {
			limit = { any_owned_leader = { has_base_skill >= 3 } }
			oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 3 }
		}
		if = {
			limit = { any_owned_leader = { has_base_skill >= 4 } }
			oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 4 }
		}
		if = {
			limit = { any_owned_leader = { has_base_skill >= 5 } }
			oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 5 }
		}
		if = {
			limit = { any_owned_leader = { has_base_skill >= 6 } }
			oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 6 }
		}
		if = {
			limit = { any_owned_leader = { has_base_skill >= 7 } }
			oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 7 }
		}
		if = {
			limit = { any_owned_leader = { has_base_skill >= 8 } }
			oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 8 }
		}
		if = {
			limit = { any_owned_leader = { has_base_skill >= 9 } }
			oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 9 }
		}
		if = {
			limit = { any_owned_leader = { has_base_skill >= 10 } }
			oxr_mdlc_leader_making_set_maximum_allowed_leader_level = { LEVEL = 10 }
		}
	}
	custom_gui = xvcv_mdlc_leader_making

	option = {
		name = xvcv_mdlc_customgui.1.a
	}
}
#'xvcv_mdlc_tech_leader_making_improvement' techs effect event
country_event = {
	id = xvcv_mdlc_customgui.2
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			last_increased_tech = xvcv_mdlc_tech_leader_making_improvement
			last_increased_tech = xvcv_mdlc_tech_leader_making_improvement_2
		}
	}

	immediate = {
		change_variable = { which = xvcv_mdlc_leader_making_trait_points value = 1 }
		change_variable = { which = xvcv_mdlc_leader_making_max_traits_number value = 1 }
	}
}
#core modifying
country_event = {
	id = xvcv_mdlc_customgui.3
	title = "xvcv_mdlc_customgui.1.name"
	desc = "xvcv_mdlc_customgui.1.desc"
	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = { portrait = root.ruler }

	immediate = {
		#check the ruler's leader class every time the player opens this customgui #because it could be changed in between
		#clear the previous flag
		switch = {
			trigger = has_country_flag
			xvcv_mdlc_core_modifying_ruler_leader_class_official = { remove_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_official }
			xvcv_mdlc_core_modifying_ruler_leader_class_scientist = { remove_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_scientist }
			xvcv_mdlc_core_modifying_ruler_leader_class_commander = { remove_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_commander }
		}
		#and check the leader class again
		ruler = {
			# Start setting vars scoped to ruler
			save_global_event_target_as = xvcv_mdlc_core_modifying_empire_ruler
			event_target:xvcv_mdlc_core_modifying_empire_ruler = {
				xvcv_mdlc_core_modifying_clear_trait_variables_effect = yes
			}
			switch = {
				trigger = leader_class
				#sadly, this won't support modded leader classes
				official = { prev = { set_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_official } }
				scientist = { prev = { set_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_scientist } }
				commander = { prev = { set_country_flag = xvcv_mdlc_core_modifying_ruler_leader_class_commander } }
			}
		}
		if = {
			limit = { NOT = { has_country_flag = xvcv_mdlc_core_modifying_trait_points_set } }
			set_country_flag = xvcv_mdlc_core_modifying_trait_points_set #one-time only
			xvcv_mdlc_core_modifying_clear_trait_variables_effect = yes
		}
		oxr_mdlc_core_modifying_check_existing_traits_on_gui_open_effect = yes
	}
	custom_gui = xvcv_mdlc_core_modifying

	option = {
		name = xvcv_mdlc_customgui.1.a
	}
}
#'xvcv_mdlc_tech_core_modifying_improvement' techs effect event
country_event = {
	id = xvcv_mdlc_customgui.4
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			last_increased_tech = xvcv_mdlc_tech_core_modifying_improvement
			last_increased_tech = xvcv_mdlc_tech_core_modifying_improvement_2
		}
	}

	immediate = {
		change_variable = { which = xvcv_mdlc_core_modifying_trait_points value = 1 }
		change_variable = { which = xvcv_mdlc_core_modifying_trait_picks value = 1 }
	}
}
#reset core modifying variables when a new ruler drone is set
country_event = {
	id = xvcv_mdlc_customgui.5
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_country_flag = xvcv_mdlc_core_modifying_trait_points_set
	}

	immediate = {
		xvcv_mdlc_core_modifying_clear_trait_variables_effect = yes
	}
}

